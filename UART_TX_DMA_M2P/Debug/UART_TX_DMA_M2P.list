
UART_TX_DMA_M2P.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c94  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002e40  08002e40  00012e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e60  08002e60  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  08002e60  08002e60  00012e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e68  08002e68  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e68  08002e68  00012e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e6c  08002e6c  00012e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  08002e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020158  2**0
                  CONTENTS
 10 .bss          000000c4  20000158  20000158  00020158  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000021c  2000021c  00020158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008b2b  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000164b  00000000  00000000  00028cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  0002a300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002205f  00000000  00000000  0002a9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000891b  00000000  00000000  0004ca37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce84d  00000000  00000000  00055352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00123b9f  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00000648  00000000  00000000  00123bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001a94  00000000  00000000  00124238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000158 	.word	0x20000158
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002e28 	.word	0x08002e28

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000015c 	.word	0x2000015c
 80001e8:	08002e28 	.word	0x08002e28

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fc68 	bl	8000dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f808 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f8bc 	bl	8000678 <MX_GPIO_Init>
  MX_DMA_Init();
 8000500:	f000 f89a 	bl	8000638 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000504:	f000 f86e 	bl	80005e4 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000508:	e7fe      	b.n	8000508 <main+0x18>
	...

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b094      	sub	sp, #80	; 0x50
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0320 	add.w	r3, r7, #32
 8000516:	2230      	movs	r2, #48	; 0x30
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f002 fc7c 	bl	8002e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	4b29      	ldr	r3, [pc, #164]	; (80005dc <SystemClock_Config+0xd0>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	4a28      	ldr	r2, [pc, #160]	; (80005dc <SystemClock_Config+0xd0>)
 800053a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053e:	6413      	str	r3, [r2, #64]	; 0x40
 8000540:	4b26      	ldr	r3, [pc, #152]	; (80005dc <SystemClock_Config+0xd0>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4b23      	ldr	r3, [pc, #140]	; (80005e0 <SystemClock_Config+0xd4>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000558:	4a21      	ldr	r2, [pc, #132]	; (80005e0 <SystemClock_Config+0xd4>)
 800055a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <SystemClock_Config+0xd4>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056c:	2302      	movs	r3, #2
 800056e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000570:	2301      	movs	r3, #1
 8000572:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000574:	2310      	movs	r3, #16
 8000576:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	2302      	movs	r3, #2
 800057a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057c:	2300      	movs	r3, #0
 800057e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000580:	2308      	movs	r3, #8
 8000582:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000584:	2332      	movs	r3, #50	; 0x32
 8000586:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000588:	2304      	movs	r3, #4
 800058a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800058c:	2307      	movs	r3, #7
 800058e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 0320 	add.w	r3, r7, #32
 8000594:	4618      	mov	r0, r3
 8000596:	f001 faf5 	bl	8001b84 <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005a0:	f000 fada 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	230f      	movs	r3, #15
 80005a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a8:	2302      	movs	r3, #2
 80005aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80005b0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80005b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 fd56 	bl	8002074 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005ce:	f000 fac3 	bl	8000b58 <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3750      	adds	r7, #80	; 0x50
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40007000 	.word	0x40007000

080005e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 80005ea:	4a12      	ldr	r2, [pc, #72]	; (8000634 <MX_USART1_UART_Init+0x50>)
 80005ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 80005f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 800060a:	220c      	movs	r2, #12
 800060c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 800061c:	f001 ff4a 	bl	80024b4 <HAL_UART_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000626:	f000 fa97 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000174 	.word	0x20000174
 8000634:	40011000 	.word	0x40011000

08000638 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_DMA_Init+0x3c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a0b      	ldr	r2, [pc, #44]	; (8000674 <MX_DMA_Init+0x3c>)
 8000648:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_DMA_Init+0x3c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	2100      	movs	r1, #0
 800065e:	2046      	movs	r0, #70	; 0x46
 8000660:	f000 fcff 	bl	8001062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000664:	2046      	movs	r0, #70	; 0x46
 8000666:	f000 fd18 	bl	800109a <HAL_NVIC_EnableIRQ>

}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08e      	sub	sp, #56	; 0x38
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	623b      	str	r3, [r7, #32]
 8000692:	4bb2      	ldr	r3, [pc, #712]	; (800095c <MX_GPIO_Init+0x2e4>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4ab1      	ldr	r2, [pc, #708]	; (800095c <MX_GPIO_Init+0x2e4>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4baf      	ldr	r3, [pc, #700]	; (800095c <MX_GPIO_Init+0x2e4>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	623b      	str	r3, [r7, #32]
 80006a8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
 80006ae:	4bab      	ldr	r3, [pc, #684]	; (800095c <MX_GPIO_Init+0x2e4>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4aaa      	ldr	r2, [pc, #680]	; (800095c <MX_GPIO_Init+0x2e4>)
 80006b4:	f043 0320 	orr.w	r3, r3, #32
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4ba8      	ldr	r3, [pc, #672]	; (800095c <MX_GPIO_Init+0x2e4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0320 	and.w	r3, r3, #32
 80006c2:	61fb      	str	r3, [r7, #28]
 80006c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]
 80006ca:	4ba4      	ldr	r3, [pc, #656]	; (800095c <MX_GPIO_Init+0x2e4>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4aa3      	ldr	r2, [pc, #652]	; (800095c <MX_GPIO_Init+0x2e4>)
 80006d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4ba1      	ldr	r3, [pc, #644]	; (800095c <MX_GPIO_Init+0x2e4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006de:	61bb      	str	r3, [r7, #24]
 80006e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
 80006e6:	4b9d      	ldr	r3, [pc, #628]	; (800095c <MX_GPIO_Init+0x2e4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a9c      	ldr	r2, [pc, #624]	; (800095c <MX_GPIO_Init+0x2e4>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b9a      	ldr	r3, [pc, #616]	; (800095c <MX_GPIO_Init+0x2e4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	4b96      	ldr	r3, [pc, #600]	; (800095c <MX_GPIO_Init+0x2e4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a95      	ldr	r2, [pc, #596]	; (800095c <MX_GPIO_Init+0x2e4>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b93      	ldr	r3, [pc, #588]	; (800095c <MX_GPIO_Init+0x2e4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	4b8f      	ldr	r3, [pc, #572]	; (800095c <MX_GPIO_Init+0x2e4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a8e      	ldr	r2, [pc, #568]	; (800095c <MX_GPIO_Init+0x2e4>)
 8000724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b8c      	ldr	r3, [pc, #560]	; (800095c <MX_GPIO_Init+0x2e4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	4b88      	ldr	r3, [pc, #544]	; (800095c <MX_GPIO_Init+0x2e4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a87      	ldr	r2, [pc, #540]	; (800095c <MX_GPIO_Init+0x2e4>)
 8000740:	f043 0310 	orr.w	r3, r3, #16
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b85      	ldr	r3, [pc, #532]	; (800095c <MX_GPIO_Init+0x2e4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0310 	and.w	r3, r3, #16
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	4b81      	ldr	r3, [pc, #516]	; (800095c <MX_GPIO_Init+0x2e4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a80      	ldr	r2, [pc, #512]	; (800095c <MX_GPIO_Init+0x2e4>)
 800075c:	f043 0308 	orr.w	r3, r3, #8
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b7e      	ldr	r3, [pc, #504]	; (800095c <MX_GPIO_Init+0x2e4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0308 	and.w	r3, r3, #8
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2116      	movs	r1, #22
 8000772:	487b      	ldr	r0, [pc, #492]	; (8000960 <MX_GPIO_Init+0x2e8>)
 8000774:	f001 f9c8 	bl	8001b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	2180      	movs	r1, #128	; 0x80
 800077c:	4879      	ldr	r0, [pc, #484]	; (8000964 <MX_GPIO_Init+0x2ec>)
 800077e:	f001 f9c3 	bl	8001b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000788:	4877      	ldr	r0, [pc, #476]	; (8000968 <MX_GPIO_Init+0x2f0>)
 800078a:	f001 f9bd 	bl	8001b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000794:	4875      	ldr	r0, [pc, #468]	; (800096c <MX_GPIO_Init+0x2f4>)
 8000796:	f001 f9b7 	bl	8001b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800079a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a0:	2302      	movs	r3, #2
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a8:	2303      	movs	r3, #3
 80007aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007ac:	230c      	movs	r3, #12
 80007ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b4:	4619      	mov	r1, r3
 80007b6:	486e      	ldr	r0, [pc, #440]	; (8000970 <MX_GPIO_Init+0x2f8>)
 80007b8:	f000 fffa 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80007bc:	f44f 7360 	mov.w	r3, #896	; 0x380
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80007ce:	2305      	movs	r3, #5
 80007d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d6:	4619      	mov	r1, r3
 80007d8:	4865      	ldr	r0, [pc, #404]	; (8000970 <MX_GPIO_Init+0x2f8>)
 80007da:	f000 ffe9 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80007de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80007f0:	230e      	movs	r3, #14
 80007f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f8:	4619      	mov	r1, r3
 80007fa:	485d      	ldr	r0, [pc, #372]	; (8000970 <MX_GPIO_Init+0x2f8>)
 80007fc:	f000 ffd8 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000800:	2301      	movs	r3, #1
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000810:	230c      	movs	r3, #12
 8000812:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000818:	4619      	mov	r1, r3
 800081a:	4851      	ldr	r0, [pc, #324]	; (8000960 <MX_GPIO_Init+0x2e8>)
 800081c:	f000 ffc8 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000820:	2316      	movs	r3, #22
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000834:	4619      	mov	r1, r3
 8000836:	484a      	ldr	r0, [pc, #296]	; (8000960 <MX_GPIO_Init+0x2e8>)
 8000838:	f000 ffba 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800083c:	2301      	movs	r3, #1
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000840:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084e:	4619      	mov	r1, r3
 8000850:	4844      	ldr	r0, [pc, #272]	; (8000964 <MX_GPIO_Init+0x2ec>)
 8000852:	f000 ffad 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000856:	f248 0306 	movw	r3, #32774	; 0x8006
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800085c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086a:	4619      	mov	r1, r3
 800086c:	483d      	ldr	r0, [pc, #244]	; (8000964 <MX_GPIO_Init+0x2ec>)
 800086e:	f000 ff9f 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000872:	f641 0358 	movw	r3, #6232	; 0x1858
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000884:	230e      	movs	r3, #14
 8000886:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088c:	4619      	mov	r1, r3
 800088e:	4835      	ldr	r0, [pc, #212]	; (8000964 <MX_GPIO_Init+0x2ec>)
 8000890:	f000 ff8e 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000894:	2380      	movs	r3, #128	; 0x80
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a8:	4619      	mov	r1, r3
 80008aa:	482e      	ldr	r0, [pc, #184]	; (8000964 <MX_GPIO_Init+0x2ec>)
 80008ac:	f000 ff80 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80008b0:	2320      	movs	r3, #32
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008b4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	4619      	mov	r1, r3
 80008c4:	4826      	ldr	r0, [pc, #152]	; (8000960 <MX_GPIO_Init+0x2e8>)
 80008c6:	f000 ff73 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80008ca:	2303      	movs	r3, #3
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80008da:	2309      	movs	r3, #9
 80008dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e2:	4619      	mov	r1, r3
 80008e4:	4823      	ldr	r0, [pc, #140]	; (8000974 <MX_GPIO_Init+0x2fc>)
 80008e6:	f000 ff63 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008ea:	2304      	movs	r3, #4
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fa:	4619      	mov	r1, r3
 80008fc:	481d      	ldr	r0, [pc, #116]	; (8000974 <MX_GPIO_Init+0x2fc>)
 80008fe:	f000 ff57 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000902:	f248 1333 	movw	r3, #33075	; 0x8133
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000910:	2303      	movs	r3, #3
 8000912:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000914:	230c      	movs	r3, #12
 8000916:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091c:	4619      	mov	r1, r3
 800091e:	4813      	ldr	r0, [pc, #76]	; (800096c <MX_GPIO_Init+0x2f4>)
 8000920:	f000 ff46 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000924:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000936:	230c      	movs	r3, #12
 8000938:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800093a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093e:	4619      	mov	r1, r3
 8000940:	480d      	ldr	r0, [pc, #52]	; (8000978 <MX_GPIO_Init+0x300>)
 8000942:	f000 ff35 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000946:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	633b      	str	r3, [r7, #48]	; 0x30
 8000958:	e010      	b.n	800097c <MX_GPIO_Init+0x304>
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800
 8000960:	40020800 	.word	0x40020800
 8000964:	40020000 	.word	0x40020000
 8000968:	40020c00 	.word	0x40020c00
 800096c:	40021800 	.word	0x40021800
 8000970:	40021400 	.word	0x40021400
 8000974:	40020400 	.word	0x40020400
 8000978:	40021000 	.word	0x40021000
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800097c:	230e      	movs	r3, #14
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	4619      	mov	r1, r3
 8000986:	486f      	ldr	r0, [pc, #444]	; (8000b44 <MX_GPIO_Init+0x4cc>)
 8000988:	f000 ff12 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800098c:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800099e:	230c      	movs	r3, #12
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a6:	4619      	mov	r1, r3
 80009a8:	4866      	ldr	r0, [pc, #408]	; (8000b44 <MX_GPIO_Init+0x4cc>)
 80009aa:	f000 ff01 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80009ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c0:	4619      	mov	r1, r3
 80009c2:	4860      	ldr	r0, [pc, #384]	; (8000b44 <MX_GPIO_Init+0x4cc>)
 80009c4:	f000 fef4 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80009c8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009da:	230c      	movs	r3, #12
 80009dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e2:	4619      	mov	r1, r3
 80009e4:	4858      	ldr	r0, [pc, #352]	; (8000b48 <MX_GPIO_Init+0x4d0>)
 80009e6:	f000 fee3 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80009ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fc:	4619      	mov	r1, r3
 80009fe:	4852      	ldr	r0, [pc, #328]	; (8000b48 <MX_GPIO_Init+0x4d0>)
 8000a00:	f000 fed6 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000a04:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	484a      	ldr	r0, [pc, #296]	; (8000b48 <MX_GPIO_Init+0x4d0>)
 8000a1e:	f000 fec7 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000a22:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a34:	230e      	movs	r3, #14
 8000a36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4843      	ldr	r0, [pc, #268]	; (8000b4c <MX_GPIO_Init+0x4d4>)
 8000a40:	f000 feb6 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000a44:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a56:	230e      	movs	r3, #14
 8000a58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5e:	4619      	mov	r1, r3
 8000a60:	483b      	ldr	r0, [pc, #236]	; (8000b50 <MX_GPIO_Init+0x4d8>)
 8000a62:	f000 fea5 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000a66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a6c:	2312      	movs	r3, #18
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a80:	4619      	mov	r1, r3
 8000a82:	4833      	ldr	r0, [pc, #204]	; (8000b50 <MX_GPIO_Init+0x4d8>)
 8000a84:	f000 fe94 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000a88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a8e:	2312      	movs	r3, #18
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	482b      	ldr	r0, [pc, #172]	; (8000b54 <MX_GPIO_Init+0x4dc>)
 8000aa6:	f000 fe83 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000aaa:	2348      	movs	r3, #72	; 0x48
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000aba:	230e      	movs	r3, #14
 8000abc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4820      	ldr	r0, [pc, #128]	; (8000b48 <MX_GPIO_Init+0x4d0>)
 8000ac6:	f000 fe73 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000aca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000adc:	2309      	movs	r3, #9
 8000ade:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4819      	ldr	r0, [pc, #100]	; (8000b4c <MX_GPIO_Init+0x4d4>)
 8000ae8:	f000 fe62 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000aec:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b02:	4619      	mov	r1, r3
 8000b04:	4811      	ldr	r0, [pc, #68]	; (8000b4c <MX_GPIO_Init+0x4d4>)
 8000b06:	f000 fe53 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000b0a:	2360      	movs	r3, #96	; 0x60
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b1a:	230c      	movs	r3, #12
 8000b1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b22:	4619      	mov	r1, r3
 8000b24:	4807      	ldr	r0, [pc, #28]	; (8000b44 <MX_GPIO_Init+0x4cc>)
 8000b26:	f000 fe43 	bl	80017b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2006      	movs	r0, #6
 8000b30:	f000 fa97 	bl	8001062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b34:	2006      	movs	r0, #6
 8000b36:	f000 fab0 	bl	800109a <HAL_NVIC_EnableIRQ>

}
 8000b3a:	bf00      	nop
 8000b3c:	3738      	adds	r7, #56	; 0x38
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40020400 	.word	0x40020400
 8000b48:	40020c00 	.word	0x40020c00
 8000b4c:	40021800 	.word	0x40021800
 8000b50:	40020800 	.word	0x40020800
 8000b54:	40020000 	.word	0x40020000

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <Error_Handler+0x8>
	...

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	4a0f      	ldr	r2, [pc, #60]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b78:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ba2:	2007      	movs	r0, #7
 8000ba4:	f000 fa52 	bl	800104c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	; 0x28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a35      	ldr	r2, [pc, #212]	; (8000ca8 <HAL_UART_MspInit+0xf4>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d163      	bne.n	8000c9e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	4b34      	ldr	r3, [pc, #208]	; (8000cac <HAL_UART_MspInit+0xf8>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	4a33      	ldr	r2, [pc, #204]	; (8000cac <HAL_UART_MspInit+0xf8>)
 8000be0:	f043 0310 	orr.w	r3, r3, #16
 8000be4:	6453      	str	r3, [r2, #68]	; 0x44
 8000be6:	4b31      	ldr	r3, [pc, #196]	; (8000cac <HAL_UART_MspInit+0xf8>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	f003 0310 	and.w	r3, r3, #16
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <HAL_UART_MspInit+0xf8>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a2c      	ldr	r2, [pc, #176]	; (8000cac <HAL_UART_MspInit+0xf8>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <HAL_UART_MspInit+0xf8>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000c0e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c20:	2307      	movs	r3, #7
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4821      	ldr	r0, [pc, #132]	; (8000cb0 <HAL_UART_MspInit+0xfc>)
 8000c2c:	f000 fdc0 	bl	80017b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000c30:	4b20      	ldr	r3, [pc, #128]	; (8000cb4 <HAL_UART_MspInit+0x100>)
 8000c32:	4a21      	ldr	r2, [pc, #132]	; (8000cb8 <HAL_UART_MspInit+0x104>)
 8000c34:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000c36:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <HAL_UART_MspInit+0x100>)
 8000c38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c3c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <HAL_UART_MspInit+0x100>)
 8000c40:	2240      	movs	r2, #64	; 0x40
 8000c42:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <HAL_UART_MspInit+0x100>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <HAL_UART_MspInit+0x100>)
 8000c4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c50:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <HAL_UART_MspInit+0x100>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <HAL_UART_MspInit+0x100>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <HAL_UART_MspInit+0x100>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <HAL_UART_MspInit+0x100>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_UART_MspInit+0x100>)
 8000c6c:	2204      	movs	r2, #4
 8000c6e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c70:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <HAL_UART_MspInit+0x100>)
 8000c72:	2203      	movs	r2, #3
 8000c74:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_UART_MspInit+0x100>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <HAL_UART_MspInit+0x100>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000c82:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <HAL_UART_MspInit+0x100>)
 8000c84:	f000 fa24 	bl	80010d0 <HAL_DMA_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8000c8e:	f7ff ff63 	bl	8000b58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <HAL_UART_MspInit+0x100>)
 8000c96:	635a      	str	r2, [r3, #52]	; 0x34
 8000c98:	4a06      	ldr	r2, [pc, #24]	; (8000cb4 <HAL_UART_MspInit+0x100>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	; 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40011000 	.word	0x40011000
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	200001b8 	.word	0x200001b8
 8000cb8:	400264b8 	.word	0x400264b8

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <NMI_Handler+0x4>

08000cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <HardFault_Handler+0x4>

08000cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <MemManage_Handler+0x4>

08000cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d08:	f000 f8b0 	bl	8000e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	/* send uart request to DMA	 */
	HAL_UART_Transmit_DMA(&huart1, data_stream, (uint16_t)data_len);
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <EXTI0_IRQHandler+0x20>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4905      	ldr	r1, [pc, #20]	; (8000d34 <EXTI0_IRQHandler+0x24>)
 8000d1e:	4806      	ldr	r0, [pc, #24]	; (8000d38 <EXTI0_IRQHandler+0x28>)
 8000d20:	f001 fc16 	bl	8002550 <HAL_UART_Transmit_DMA>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d24:	2001      	movs	r0, #1
 8000d26:	f000 ff09 	bl	8001b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000148 	.word	0x20000148
 8000d34:	20000000 	.word	0x20000000
 8000d38:	20000174 	.word	0x20000174

08000d3c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <DMA2_Stream7_IRQHandler+0x10>)
 8000d42:	f000 facb 	bl	80012dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200001b8 	.word	0x200001b8

08000d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <SystemInit+0x20>)
 8000d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5a:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <SystemInit+0x20>)
 8000d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dac <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d78:	480d      	ldr	r0, [pc, #52]	; (8000db0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d7a:	490e      	ldr	r1, [pc, #56]	; (8000db4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d7c:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d80:	e002      	b.n	8000d88 <LoopCopyDataInit>

08000d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d86:	3304      	adds	r3, #4

08000d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d8c:	d3f9      	bcc.n	8000d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8e:	4a0b      	ldr	r2, [pc, #44]	; (8000dbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d90:	4c0b      	ldr	r4, [pc, #44]	; (8000dc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d94:	e001      	b.n	8000d9a <LoopFillZerobss>

08000d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d98:	3204      	adds	r2, #4

08000d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d9c:	d3fb      	bcc.n	8000d96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d9e:	f7ff ffd7 	bl	8000d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000da2:	f002 f815 	bl	8002dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000da6:	f7ff fba3 	bl	80004f0 <main>
  bx  lr    
 8000daa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000dac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db4:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000db8:	08002e70 	.word	0x08002e70
  ldr r2, =_sbss
 8000dbc:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000dc0:	2000021c 	.word	0x2000021c

08000dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC_IRQHandler>
	...

08000dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <HAL_Init+0x40>)
 8000dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_Init+0x40>)
 8000dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <HAL_Init+0x40>)
 8000dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df0:	2003      	movs	r0, #3
 8000df2:	f000 f92b 	bl	800104c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df6:	2000      	movs	r0, #0
 8000df8:	f000 f808 	bl	8000e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dfc:	f7ff feb2 	bl	8000b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40023c00 	.word	0x40023c00

08000e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_InitTick+0x54>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_InitTick+0x58>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f943 	bl	80010b6 <HAL_SYSTICK_Config>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00e      	b.n	8000e58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b0f      	cmp	r3, #15
 8000e3e:	d80a      	bhi.n	8000e56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e40:	2200      	movs	r2, #0
 8000e42:	6879      	ldr	r1, [r7, #4]
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f000 f90b 	bl	8001062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e4c:	4a06      	ldr	r2, [pc, #24]	; (8000e68 <HAL_InitTick+0x5c>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e52:	2300      	movs	r3, #0
 8000e54:	e000      	b.n	8000e58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	2000014c 	.word	0x2000014c
 8000e64:	20000154 	.word	0x20000154
 8000e68:	20000150 	.word	0x20000150

08000e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_IncTick+0x20>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x24>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <HAL_IncTick+0x24>)
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000154 	.word	0x20000154
 8000e90:	20000218 	.word	0x20000218

08000e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return uwTick;
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <HAL_GetTick+0x14>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000218 	.word	0x20000218

08000eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ede:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	60d3      	str	r3, [r2, #12]
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <__NVIC_GetPriorityGrouping+0x18>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	0a1b      	lsrs	r3, r3, #8
 8000efe:	f003 0307 	and.w	r3, r3, #7
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	db0b      	blt.n	8000f3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	f003 021f 	and.w	r2, r3, #31
 8000f28:	4907      	ldr	r1, [pc, #28]	; (8000f48 <__NVIC_EnableIRQ+0x38>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	095b      	lsrs	r3, r3, #5
 8000f30:	2001      	movs	r0, #1
 8000f32:	fa00 f202 	lsl.w	r2, r0, r2
 8000f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000e100 	.word	0xe000e100

08000f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	db0a      	blt.n	8000f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	490c      	ldr	r1, [pc, #48]	; (8000f98 <__NVIC_SetPriority+0x4c>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	0112      	lsls	r2, r2, #4
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	440b      	add	r3, r1
 8000f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f74:	e00a      	b.n	8000f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4908      	ldr	r1, [pc, #32]	; (8000f9c <__NVIC_SetPriority+0x50>)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	3b04      	subs	r3, #4
 8000f84:	0112      	lsls	r2, r2, #4
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	440b      	add	r3, r1
 8000f8a:	761a      	strb	r2, [r3, #24]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000e100 	.word	0xe000e100
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	; 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f1c3 0307 	rsb	r3, r3, #7
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	bf28      	it	cs
 8000fbe:	2304      	movcs	r3, #4
 8000fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	2b06      	cmp	r3, #6
 8000fc8:	d902      	bls.n	8000fd0 <NVIC_EncodePriority+0x30>
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3b03      	subs	r3, #3
 8000fce:	e000      	b.n	8000fd2 <NVIC_EncodePriority+0x32>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43d9      	mvns	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	4313      	orrs	r3, r2
         );
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3724      	adds	r7, #36	; 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001018:	d301      	bcc.n	800101e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101a:	2301      	movs	r3, #1
 800101c:	e00f      	b.n	800103e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <SysTick_Config+0x40>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001026:	210f      	movs	r1, #15
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	f7ff ff8e 	bl	8000f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <SysTick_Config+0x40>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001036:	4b04      	ldr	r3, [pc, #16]	; (8001048 <SysTick_Config+0x40>)
 8001038:	2207      	movs	r2, #7
 800103a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	e000e010 	.word	0xe000e010

0800104c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ff29 	bl	8000eac <__NVIC_SetPriorityGrouping>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001062:	b580      	push	{r7, lr}
 8001064:	b086      	sub	sp, #24
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
 800106e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001074:	f7ff ff3e 	bl	8000ef4 <__NVIC_GetPriorityGrouping>
 8001078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	68b9      	ldr	r1, [r7, #8]
 800107e:	6978      	ldr	r0, [r7, #20]
 8001080:	f7ff ff8e 	bl	8000fa0 <NVIC_EncodePriority>
 8001084:	4602      	mov	r2, r0
 8001086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff5d 	bl	8000f4c <__NVIC_SetPriority>
}
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff31 	bl	8000f10 <__NVIC_EnableIRQ>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffa2 	bl	8001008 <SysTick_Config>
 80010c4:	4603      	mov	r3, r0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010dc:	f7ff feda 	bl	8000e94 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e099      	b.n	8001220 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2202      	movs	r2, #2
 80010f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0201 	bic.w	r2, r2, #1
 800110a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800110c:	e00f      	b.n	800112e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800110e:	f7ff fec1 	bl	8000e94 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b05      	cmp	r3, #5
 800111a:	d908      	bls.n	800112e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2220      	movs	r2, #32
 8001120:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2203      	movs	r2, #3
 8001126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e078      	b.n	8001220 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1e8      	bne.n	800110e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	4b38      	ldr	r3, [pc, #224]	; (8001228 <HAL_DMA_Init+0x158>)
 8001148:	4013      	ands	r3, r2
 800114a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800115a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001166:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001172:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	4313      	orrs	r3, r2
 800117e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001184:	2b04      	cmp	r3, #4
 8001186:	d107      	bne.n	8001198 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	4313      	orrs	r3, r2
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	4313      	orrs	r3, r2
 8001196:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	f023 0307 	bic.w	r3, r3, #7
 80011ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d117      	bne.n	80011f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d00e      	beq.n	80011f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 fa6f 	bl	80016b8 <DMA_CheckFifoParam>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d008      	beq.n	80011f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2240      	movs	r2, #64	; 0x40
 80011e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2201      	movs	r2, #1
 80011ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80011ee:	2301      	movs	r3, #1
 80011f0:	e016      	b.n	8001220 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 fa26 	bl	800164c <DMA_CalcBaseAndBitshift>
 8001200:	4603      	mov	r3, r0
 8001202:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001208:	223f      	movs	r2, #63	; 0x3f
 800120a:	409a      	lsls	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	f010803f 	.word	0xf010803f

0800122c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
 8001238:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001242:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800124a:	2b01      	cmp	r3, #1
 800124c:	d101      	bne.n	8001252 <HAL_DMA_Start_IT+0x26>
 800124e:	2302      	movs	r3, #2
 8001250:	e040      	b.n	80012d4 <HAL_DMA_Start_IT+0xa8>
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2201      	movs	r2, #1
 8001256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b01      	cmp	r3, #1
 8001264:	d12f      	bne.n	80012c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2202      	movs	r2, #2
 800126a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2200      	movs	r2, #0
 8001272:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f000 f9b8 	bl	80015f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001284:	223f      	movs	r2, #63	; 0x3f
 8001286:	409a      	lsls	r2, r3
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 0216 	orr.w	r2, r2, #22
 800129a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d007      	beq.n	80012b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 0208 	orr.w	r2, r2, #8
 80012b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f042 0201 	orr.w	r2, r2, #1
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	e005      	b.n	80012d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80012ce:	2302      	movs	r3, #2
 80012d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80012d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012e8:	4b8e      	ldr	r3, [pc, #568]	; (8001524 <HAL_DMA_IRQHandler+0x248>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a8e      	ldr	r2, [pc, #568]	; (8001528 <HAL_DMA_IRQHandler+0x24c>)
 80012ee:	fba2 2303 	umull	r2, r3, r2, r3
 80012f2:	0a9b      	lsrs	r3, r3, #10
 80012f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001306:	2208      	movs	r2, #8
 8001308:	409a      	lsls	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4013      	ands	r3, r2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d01a      	beq.n	8001348 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	2b00      	cmp	r3, #0
 800131e:	d013      	beq.n	8001348 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0204 	bic.w	r2, r2, #4
 800132e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001334:	2208      	movs	r2, #8
 8001336:	409a      	lsls	r2, r3
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001340:	f043 0201 	orr.w	r2, r3, #1
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134c:	2201      	movs	r2, #1
 800134e:	409a      	lsls	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4013      	ands	r3, r2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d012      	beq.n	800137e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00b      	beq.n	800137e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800136a:	2201      	movs	r2, #1
 800136c:	409a      	lsls	r2, r3
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001376:	f043 0202 	orr.w	r2, r3, #2
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001382:	2204      	movs	r2, #4
 8001384:	409a      	lsls	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4013      	ands	r3, r2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d012      	beq.n	80013b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d00b      	beq.n	80013b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a0:	2204      	movs	r2, #4
 80013a2:	409a      	lsls	r2, r3
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ac:	f043 0204 	orr.w	r2, r3, #4
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b8:	2210      	movs	r2, #16
 80013ba:	409a      	lsls	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4013      	ands	r3, r2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d043      	beq.n	800144c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d03c      	beq.n	800144c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d6:	2210      	movs	r2, #16
 80013d8:	409a      	lsls	r2, r3
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d018      	beq.n	800141e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d108      	bne.n	800140c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d024      	beq.n	800144c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	4798      	blx	r3
 800140a:	e01f      	b.n	800144c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001410:	2b00      	cmp	r3, #0
 8001412:	d01b      	beq.n	800144c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	4798      	blx	r3
 800141c:	e016      	b.n	800144c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001428:	2b00      	cmp	r3, #0
 800142a:	d107      	bne.n	800143c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 0208 	bic.w	r2, r2, #8
 800143a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001450:	2220      	movs	r2, #32
 8001452:	409a      	lsls	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4013      	ands	r3, r2
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 808f 	beq.w	800157c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0310 	and.w	r3, r3, #16
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 8087 	beq.w	800157c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001472:	2220      	movs	r2, #32
 8001474:	409a      	lsls	r2, r3
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b05      	cmp	r3, #5
 8001484:	d136      	bne.n	80014f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0216 	bic.w	r2, r2, #22
 8001494:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	695a      	ldr	r2, [r3, #20]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d103      	bne.n	80014b6 <HAL_DMA_IRQHandler+0x1da>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d007      	beq.n	80014c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 0208 	bic.w	r2, r2, #8
 80014c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ca:	223f      	movs	r2, #63	; 0x3f
 80014cc:	409a      	lsls	r2, r3
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d07e      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	4798      	blx	r3
        }
        return;
 80014f2:	e079      	b.n	80015e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d01d      	beq.n	800153e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d10d      	bne.n	800152c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001514:	2b00      	cmp	r3, #0
 8001516:	d031      	beq.n	800157c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	4798      	blx	r3
 8001520:	e02c      	b.n	800157c <HAL_DMA_IRQHandler+0x2a0>
 8001522:	bf00      	nop
 8001524:	2000014c 	.word	0x2000014c
 8001528:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001530:	2b00      	cmp	r3, #0
 8001532:	d023      	beq.n	800157c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	4798      	blx	r3
 800153c:	e01e      	b.n	800157c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001548:	2b00      	cmp	r3, #0
 800154a:	d10f      	bne.n	800156c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0210 	bic.w	r2, r2, #16
 800155a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001580:	2b00      	cmp	r3, #0
 8001582:	d032      	beq.n	80015ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b00      	cmp	r3, #0
 800158e:	d022      	beq.n	80015d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2205      	movs	r2, #5
 8001594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0201 	bic.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	3301      	adds	r3, #1
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d307      	bcc.n	80015c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f2      	bne.n	80015a8 <HAL_DMA_IRQHandler+0x2cc>
 80015c2:	e000      	b.n	80015c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80015c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d005      	beq.n	80015ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	4798      	blx	r3
 80015e6:	e000      	b.n	80015ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80015e8:	bf00      	nop
    }
  }
}
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800160c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b40      	cmp	r3, #64	; 0x40
 800161c:	d108      	bne.n	8001630 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800162e:	e007      	b.n	8001640 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	60da      	str	r2, [r3, #12]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	3b10      	subs	r3, #16
 800165c:	4a14      	ldr	r2, [pc, #80]	; (80016b0 <DMA_CalcBaseAndBitshift+0x64>)
 800165e:	fba2 2303 	umull	r2, r3, r2, r3
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001666:	4a13      	ldr	r2, [pc, #76]	; (80016b4 <DMA_CalcBaseAndBitshift+0x68>)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4413      	add	r3, r2
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d909      	bls.n	800168e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001682:	f023 0303 	bic.w	r3, r3, #3
 8001686:	1d1a      	adds	r2, r3, #4
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	659a      	str	r2, [r3, #88]	; 0x58
 800168c:	e007      	b.n	800169e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001696:	f023 0303 	bic.w	r3, r3, #3
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	aaaaaaab 	.word	0xaaaaaaab
 80016b4:	08002e58 	.word	0x08002e58

080016b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c0:	2300      	movs	r3, #0
 80016c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d11f      	bne.n	8001712 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	d856      	bhi.n	8001786 <DMA_CheckFifoParam+0xce>
 80016d8:	a201      	add	r2, pc, #4	; (adr r2, 80016e0 <DMA_CheckFifoParam+0x28>)
 80016da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016de:	bf00      	nop
 80016e0:	080016f1 	.word	0x080016f1
 80016e4:	08001703 	.word	0x08001703
 80016e8:	080016f1 	.word	0x080016f1
 80016ec:	08001787 	.word	0x08001787
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d046      	beq.n	800178a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001700:	e043      	b.n	800178a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001706:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800170a:	d140      	bne.n	800178e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001710:	e03d      	b.n	800178e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800171a:	d121      	bne.n	8001760 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b03      	cmp	r3, #3
 8001720:	d837      	bhi.n	8001792 <DMA_CheckFifoParam+0xda>
 8001722:	a201      	add	r2, pc, #4	; (adr r2, 8001728 <DMA_CheckFifoParam+0x70>)
 8001724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001728:	08001739 	.word	0x08001739
 800172c:	0800173f 	.word	0x0800173f
 8001730:	08001739 	.word	0x08001739
 8001734:	08001751 	.word	0x08001751
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
      break;
 800173c:	e030      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001742:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d025      	beq.n	8001796 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800174e:	e022      	b.n	8001796 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001758:	d11f      	bne.n	800179a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800175e:	e01c      	b.n	800179a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d903      	bls.n	800176e <DMA_CheckFifoParam+0xb6>
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b03      	cmp	r3, #3
 800176a:	d003      	beq.n	8001774 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800176c:	e018      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	73fb      	strb	r3, [r7, #15]
      break;
 8001772:	e015      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00e      	beq.n	800179e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
      break;
 8001784:	e00b      	b.n	800179e <DMA_CheckFifoParam+0xe6>
      break;
 8001786:	bf00      	nop
 8001788:	e00a      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      break;
 800178a:	bf00      	nop
 800178c:	e008      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      break;
 800178e:	bf00      	nop
 8001790:	e006      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      break;
 8001792:	bf00      	nop
 8001794:	e004      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      break;
 8001796:	bf00      	nop
 8001798:	e002      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800179a:	bf00      	nop
 800179c:	e000      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      break;
 800179e:	bf00      	nop
    }
  } 
  
  return status; 
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop

080017b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b089      	sub	sp, #36	; 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	e177      	b.n	8001abc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017cc:	2201      	movs	r2, #1
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	f040 8166 	bne.w	8001ab6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d005      	beq.n	8001802 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d130      	bne.n	8001864 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001838:	2201      	movs	r2, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	f003 0201 	and.w	r2, r3, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	2b03      	cmp	r3, #3
 800186e:	d017      	beq.n	80018a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	2203      	movs	r2, #3
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d123      	bne.n	80018f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	08da      	lsrs	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3208      	adds	r2, #8
 80018b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	220f      	movs	r2, #15
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	08da      	lsrs	r2, r3, #3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3208      	adds	r2, #8
 80018ee:	69b9      	ldr	r1, [r7, #24]
 80018f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0203 	and.w	r2, r3, #3
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 80c0 	beq.w	8001ab6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b66      	ldr	r3, [pc, #408]	; (8001ad4 <HAL_GPIO_Init+0x324>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	4a65      	ldr	r2, [pc, #404]	; (8001ad4 <HAL_GPIO_Init+0x324>)
 8001940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001944:	6453      	str	r3, [r2, #68]	; 0x44
 8001946:	4b63      	ldr	r3, [pc, #396]	; (8001ad4 <HAL_GPIO_Init+0x324>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001952:	4a61      	ldr	r2, [pc, #388]	; (8001ad8 <HAL_GPIO_Init+0x328>)
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	3302      	adds	r3, #2
 800195a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	220f      	movs	r2, #15
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a58      	ldr	r2, [pc, #352]	; (8001adc <HAL_GPIO_Init+0x32c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d037      	beq.n	80019ee <HAL_GPIO_Init+0x23e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a57      	ldr	r2, [pc, #348]	; (8001ae0 <HAL_GPIO_Init+0x330>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d031      	beq.n	80019ea <HAL_GPIO_Init+0x23a>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a56      	ldr	r2, [pc, #344]	; (8001ae4 <HAL_GPIO_Init+0x334>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d02b      	beq.n	80019e6 <HAL_GPIO_Init+0x236>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a55      	ldr	r2, [pc, #340]	; (8001ae8 <HAL_GPIO_Init+0x338>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d025      	beq.n	80019e2 <HAL_GPIO_Init+0x232>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a54      	ldr	r2, [pc, #336]	; (8001aec <HAL_GPIO_Init+0x33c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d01f      	beq.n	80019de <HAL_GPIO_Init+0x22e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a53      	ldr	r2, [pc, #332]	; (8001af0 <HAL_GPIO_Init+0x340>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d019      	beq.n	80019da <HAL_GPIO_Init+0x22a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a52      	ldr	r2, [pc, #328]	; (8001af4 <HAL_GPIO_Init+0x344>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d013      	beq.n	80019d6 <HAL_GPIO_Init+0x226>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a51      	ldr	r2, [pc, #324]	; (8001af8 <HAL_GPIO_Init+0x348>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00d      	beq.n	80019d2 <HAL_GPIO_Init+0x222>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a50      	ldr	r2, [pc, #320]	; (8001afc <HAL_GPIO_Init+0x34c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d007      	beq.n	80019ce <HAL_GPIO_Init+0x21e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a4f      	ldr	r2, [pc, #316]	; (8001b00 <HAL_GPIO_Init+0x350>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d101      	bne.n	80019ca <HAL_GPIO_Init+0x21a>
 80019c6:	2309      	movs	r3, #9
 80019c8:	e012      	b.n	80019f0 <HAL_GPIO_Init+0x240>
 80019ca:	230a      	movs	r3, #10
 80019cc:	e010      	b.n	80019f0 <HAL_GPIO_Init+0x240>
 80019ce:	2308      	movs	r3, #8
 80019d0:	e00e      	b.n	80019f0 <HAL_GPIO_Init+0x240>
 80019d2:	2307      	movs	r3, #7
 80019d4:	e00c      	b.n	80019f0 <HAL_GPIO_Init+0x240>
 80019d6:	2306      	movs	r3, #6
 80019d8:	e00a      	b.n	80019f0 <HAL_GPIO_Init+0x240>
 80019da:	2305      	movs	r3, #5
 80019dc:	e008      	b.n	80019f0 <HAL_GPIO_Init+0x240>
 80019de:	2304      	movs	r3, #4
 80019e0:	e006      	b.n	80019f0 <HAL_GPIO_Init+0x240>
 80019e2:	2303      	movs	r3, #3
 80019e4:	e004      	b.n	80019f0 <HAL_GPIO_Init+0x240>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e002      	b.n	80019f0 <HAL_GPIO_Init+0x240>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <HAL_GPIO_Init+0x240>
 80019ee:	2300      	movs	r3, #0
 80019f0:	69fa      	ldr	r2, [r7, #28]
 80019f2:	f002 0203 	and.w	r2, r2, #3
 80019f6:	0092      	lsls	r2, r2, #2
 80019f8:	4093      	lsls	r3, r2
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a00:	4935      	ldr	r1, [pc, #212]	; (8001ad8 <HAL_GPIO_Init+0x328>)
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	089b      	lsrs	r3, r3, #2
 8001a06:	3302      	adds	r3, #2
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a0e:	4b3d      	ldr	r3, [pc, #244]	; (8001b04 <HAL_GPIO_Init+0x354>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a32:	4a34      	ldr	r2, [pc, #208]	; (8001b04 <HAL_GPIO_Init+0x354>)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a38:	4b32      	ldr	r3, [pc, #200]	; (8001b04 <HAL_GPIO_Init+0x354>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a5c:	4a29      	ldr	r2, [pc, #164]	; (8001b04 <HAL_GPIO_Init+0x354>)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a62:	4b28      	ldr	r3, [pc, #160]	; (8001b04 <HAL_GPIO_Init+0x354>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a86:	4a1f      	ldr	r2, [pc, #124]	; (8001b04 <HAL_GPIO_Init+0x354>)
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a8c:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <HAL_GPIO_Init+0x354>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ab0:	4a14      	ldr	r2, [pc, #80]	; (8001b04 <HAL_GPIO_Init+0x354>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	61fb      	str	r3, [r7, #28]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	2b0f      	cmp	r3, #15
 8001ac0:	f67f ae84 	bls.w	80017cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	3724      	adds	r7, #36	; 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40013800 	.word	0x40013800
 8001adc:	40020000 	.word	0x40020000
 8001ae0:	40020400 	.word	0x40020400
 8001ae4:	40020800 	.word	0x40020800
 8001ae8:	40020c00 	.word	0x40020c00
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40021400 	.word	0x40021400
 8001af4:	40021800 	.word	0x40021800
 8001af8:	40021c00 	.word	0x40021c00
 8001afc:	40022000 	.word	0x40022000
 8001b00:	40022400 	.word	0x40022400
 8001b04:	40013c00 	.word	0x40013c00

08001b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	807b      	strh	r3, [r7, #2]
 8001b14:	4613      	mov	r3, r2
 8001b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b18:	787b      	ldrb	r3, [r7, #1]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b1e:	887a      	ldrh	r2, [r7, #2]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b24:	e003      	b.n	8001b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b26:	887b      	ldrh	r3, [r7, #2]
 8001b28:	041a      	lsls	r2, r3, #16
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	619a      	str	r2, [r3, #24]
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d006      	beq.n	8001b60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b52:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b58:	88fb      	ldrh	r3, [r7, #6]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 f806 	bl	8001b6c <HAL_GPIO_EXTI_Callback>
  }
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40013c00 	.word	0x40013c00

08001b6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e267      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d075      	beq.n	8001c8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ba2:	4b88      	ldr	r3, [pc, #544]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d00c      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bae:	4b85      	ldr	r3, [pc, #532]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d112      	bne.n	8001be0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bba:	4b82      	ldr	r3, [pc, #520]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bc6:	d10b      	bne.n	8001be0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc8:	4b7e      	ldr	r3, [pc, #504]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d05b      	beq.n	8001c8c <HAL_RCC_OscConfig+0x108>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d157      	bne.n	8001c8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e242      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be8:	d106      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x74>
 8001bea:	4b76      	ldr	r3, [pc, #472]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a75      	ldr	r2, [pc, #468]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e01d      	b.n	8001c34 <HAL_RCC_OscConfig+0xb0>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c00:	d10c      	bne.n	8001c1c <HAL_RCC_OscConfig+0x98>
 8001c02:	4b70      	ldr	r3, [pc, #448]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a6f      	ldr	r2, [pc, #444]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	4b6d      	ldr	r3, [pc, #436]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a6c      	ldr	r2, [pc, #432]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	e00b      	b.n	8001c34 <HAL_RCC_OscConfig+0xb0>
 8001c1c:	4b69      	ldr	r3, [pc, #420]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a68      	ldr	r2, [pc, #416]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	4b66      	ldr	r3, [pc, #408]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a65      	ldr	r2, [pc, #404]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d013      	beq.n	8001c64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7ff f92a 	bl	8000e94 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c44:	f7ff f926 	bl	8000e94 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b64      	cmp	r3, #100	; 0x64
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e207      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c56:	4b5b      	ldr	r3, [pc, #364]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0xc0>
 8001c62:	e014      	b.n	8001c8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7ff f916 	bl	8000e94 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c6c:	f7ff f912 	bl	8000e94 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	; 0x64
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e1f3      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7e:	4b51      	ldr	r3, [pc, #324]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0xe8>
 8001c8a:	e000      	b.n	8001c8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d063      	beq.n	8001d62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c9a:	4b4a      	ldr	r3, [pc, #296]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00b      	beq.n	8001cbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ca6:	4b47      	ldr	r3, [pc, #284]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d11c      	bne.n	8001cec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cb2:	4b44      	ldr	r3, [pc, #272]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d116      	bne.n	8001cec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cbe:	4b41      	ldr	r3, [pc, #260]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d005      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x152>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d001      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e1c7      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd6:	4b3b      	ldr	r3, [pc, #236]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4937      	ldr	r1, [pc, #220]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cea:	e03a      	b.n	8001d62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d020      	beq.n	8001d36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf4:	4b34      	ldr	r3, [pc, #208]	; (8001dc8 <HAL_RCC_OscConfig+0x244>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfa:	f7ff f8cb 	bl	8000e94 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d02:	f7ff f8c7 	bl	8000e94 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e1a8      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d14:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f0      	beq.n	8001d02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d20:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4925      	ldr	r1, [pc, #148]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	600b      	str	r3, [r1, #0]
 8001d34:	e015      	b.n	8001d62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d36:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <HAL_RCC_OscConfig+0x244>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3c:	f7ff f8aa 	bl	8000e94 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d44:	f7ff f8a6 	bl	8000e94 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e187      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d56:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d036      	beq.n	8001ddc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d016      	beq.n	8001da4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <HAL_RCC_OscConfig+0x248>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7c:	f7ff f88a 	bl	8000e94 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d84:	f7ff f886 	bl	8000e94 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e167      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d96:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0x200>
 8001da2:	e01b      	b.n	8001ddc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_RCC_OscConfig+0x248>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001daa:	f7ff f873 	bl	8000e94 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db0:	e00e      	b.n	8001dd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001db2:	f7ff f86f 	bl	8000e94 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d907      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e150      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	42470000 	.word	0x42470000
 8001dcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd0:	4b88      	ldr	r3, [pc, #544]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1ea      	bne.n	8001db2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 8097 	beq.w	8001f18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dee:	4b81      	ldr	r3, [pc, #516]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10f      	bne.n	8001e1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	4b7d      	ldr	r3, [pc, #500]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	4a7c      	ldr	r2, [pc, #496]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e08:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0a:	4b7a      	ldr	r3, [pc, #488]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e16:	2301      	movs	r3, #1
 8001e18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1a:	4b77      	ldr	r3, [pc, #476]	; (8001ff8 <HAL_RCC_OscConfig+0x474>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d118      	bne.n	8001e58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e26:	4b74      	ldr	r3, [pc, #464]	; (8001ff8 <HAL_RCC_OscConfig+0x474>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a73      	ldr	r2, [pc, #460]	; (8001ff8 <HAL_RCC_OscConfig+0x474>)
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e32:	f7ff f82f 	bl	8000e94 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3a:	f7ff f82b 	bl	8000e94 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e10c      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4c:	4b6a      	ldr	r3, [pc, #424]	; (8001ff8 <HAL_RCC_OscConfig+0x474>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x2ea>
 8001e60:	4b64      	ldr	r3, [pc, #400]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e64:	4a63      	ldr	r2, [pc, #396]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e6c:	e01c      	b.n	8001ea8 <HAL_RCC_OscConfig+0x324>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2b05      	cmp	r3, #5
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x30c>
 8001e76:	4b5f      	ldr	r3, [pc, #380]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7a:	4a5e      	ldr	r2, [pc, #376]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e7c:	f043 0304 	orr.w	r3, r3, #4
 8001e80:	6713      	str	r3, [r2, #112]	; 0x70
 8001e82:	4b5c      	ldr	r3, [pc, #368]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e86:	4a5b      	ldr	r2, [pc, #364]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e8e:	e00b      	b.n	8001ea8 <HAL_RCC_OscConfig+0x324>
 8001e90:	4b58      	ldr	r3, [pc, #352]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e94:	4a57      	ldr	r2, [pc, #348]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e9c:	4b55      	ldr	r3, [pc, #340]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea0:	4a54      	ldr	r2, [pc, #336]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001ea2:	f023 0304 	bic.w	r3, r3, #4
 8001ea6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d015      	beq.n	8001edc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb0:	f7fe fff0 	bl	8000e94 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb8:	f7fe ffec 	bl	8000e94 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e0cb      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ece:	4b49      	ldr	r3, [pc, #292]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0ee      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x334>
 8001eda:	e014      	b.n	8001f06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001edc:	f7fe ffda 	bl	8000e94 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee2:	e00a      	b.n	8001efa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee4:	f7fe ffd6 	bl	8000e94 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e0b5      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efa:	4b3e      	ldr	r3, [pc, #248]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1ee      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f06:	7dfb      	ldrb	r3, [r7, #23]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d105      	bne.n	8001f18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0c:	4b39      	ldr	r3, [pc, #228]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	4a38      	ldr	r2, [pc, #224]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80a1 	beq.w	8002064 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f22:	4b34      	ldr	r3, [pc, #208]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d05c      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d141      	bne.n	8001fba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f36:	4b31      	ldr	r3, [pc, #196]	; (8001ffc <HAL_RCC_OscConfig+0x478>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7fe ffaa 	bl	8000e94 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f44:	f7fe ffa6 	bl	8000e94 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e087      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f56:	4b27      	ldr	r3, [pc, #156]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69da      	ldr	r2, [r3, #28]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	019b      	lsls	r3, r3, #6
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f78:	085b      	lsrs	r3, r3, #1
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	041b      	lsls	r3, r3, #16
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f84:	061b      	lsls	r3, r3, #24
 8001f86:	491b      	ldr	r1, [pc, #108]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <HAL_RCC_OscConfig+0x478>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f92:	f7fe ff7f 	bl	8000e94 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f9a:	f7fe ff7b 	bl	8000e94 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e05c      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fac:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x416>
 8001fb8:	e054      	b.n	8002064 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <HAL_RCC_OscConfig+0x478>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7fe ff68 	bl	8000e94 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7fe ff64 	bl	8000e94 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e045      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x444>
 8001fe6:	e03d      	b.n	8002064 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d107      	bne.n	8002000 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e038      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40007000 	.word	0x40007000
 8001ffc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002000:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <HAL_RCC_OscConfig+0x4ec>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d028      	beq.n	8002060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002018:	429a      	cmp	r2, r3
 800201a:	d121      	bne.n	8002060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d11a      	bne.n	8002060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002030:	4013      	ands	r3, r2
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002036:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002038:	4293      	cmp	r3, r2
 800203a:	d111      	bne.n	8002060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	3b01      	subs	r3, #1
 800204a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d107      	bne.n	8002060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800

08002074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0cc      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002088:	4b68      	ldr	r3, [pc, #416]	; (800222c <HAL_RCC_ClockConfig+0x1b8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 030f 	and.w	r3, r3, #15
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d90c      	bls.n	80020b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b65      	ldr	r3, [pc, #404]	; (800222c <HAL_RCC_ClockConfig+0x1b8>)
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800209e:	4b63      	ldr	r3, [pc, #396]	; (800222c <HAL_RCC_ClockConfig+0x1b8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0b8      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d020      	beq.n	80020fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020c8:	4b59      	ldr	r3, [pc, #356]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	4a58      	ldr	r2, [pc, #352]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020e0:	4b53      	ldr	r3, [pc, #332]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	4a52      	ldr	r2, [pc, #328]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ec:	4b50      	ldr	r3, [pc, #320]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	494d      	ldr	r1, [pc, #308]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d044      	beq.n	8002194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d107      	bne.n	8002122 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002112:	4b47      	ldr	r3, [pc, #284]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d119      	bne.n	8002152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e07f      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d003      	beq.n	8002132 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800212e:	2b03      	cmp	r3, #3
 8002130:	d107      	bne.n	8002142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002132:	4b3f      	ldr	r3, [pc, #252]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e06f      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002142:	4b3b      	ldr	r3, [pc, #236]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e067      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002152:	4b37      	ldr	r3, [pc, #220]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f023 0203 	bic.w	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4934      	ldr	r1, [pc, #208]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	4313      	orrs	r3, r2
 8002162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002164:	f7fe fe96 	bl	8000e94 <HAL_GetTick>
 8002168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	e00a      	b.n	8002182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216c:	f7fe fe92 	bl	8000e94 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	; 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e04f      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 020c 	and.w	r2, r3, #12
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	429a      	cmp	r2, r3
 8002192:	d1eb      	bne.n	800216c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002194:	4b25      	ldr	r3, [pc, #148]	; (800222c <HAL_RCC_ClockConfig+0x1b8>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d20c      	bcs.n	80021bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a2:	4b22      	ldr	r3, [pc, #136]	; (800222c <HAL_RCC_ClockConfig+0x1b8>)
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021aa:	4b20      	ldr	r3, [pc, #128]	; (800222c <HAL_RCC_ClockConfig+0x1b8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d001      	beq.n	80021bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e032      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c8:	4b19      	ldr	r3, [pc, #100]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	4916      	ldr	r1, [pc, #88]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d009      	beq.n	80021fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021e6:	4b12      	ldr	r3, [pc, #72]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	490e      	ldr	r1, [pc, #56]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021fa:	f000 f821 	bl	8002240 <HAL_RCC_GetSysClockFreq>
 80021fe:	4602      	mov	r2, r0
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	490a      	ldr	r1, [pc, #40]	; (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 800220c:	5ccb      	ldrb	r3, [r1, r3]
 800220e:	fa22 f303 	lsr.w	r3, r2, r3
 8002212:	4a09      	ldr	r2, [pc, #36]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <HAL_RCC_ClockConfig+0x1c8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe fdf6 	bl	8000e0c <HAL_InitTick>

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40023c00 	.word	0x40023c00
 8002230:	40023800 	.word	0x40023800
 8002234:	08002e40 	.word	0x08002e40
 8002238:	2000014c 	.word	0x2000014c
 800223c:	20000150 	.word	0x20000150

08002240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002244:	b094      	sub	sp, #80	; 0x50
 8002246:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	647b      	str	r3, [r7, #68]	; 0x44
 800224c:	2300      	movs	r3, #0
 800224e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002250:	2300      	movs	r3, #0
 8002252:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002258:	4b79      	ldr	r3, [pc, #484]	; (8002440 <HAL_RCC_GetSysClockFreq+0x200>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 030c 	and.w	r3, r3, #12
 8002260:	2b08      	cmp	r3, #8
 8002262:	d00d      	beq.n	8002280 <HAL_RCC_GetSysClockFreq+0x40>
 8002264:	2b08      	cmp	r3, #8
 8002266:	f200 80e1 	bhi.w	800242c <HAL_RCC_GetSysClockFreq+0x1ec>
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0x34>
 800226e:	2b04      	cmp	r3, #4
 8002270:	d003      	beq.n	800227a <HAL_RCC_GetSysClockFreq+0x3a>
 8002272:	e0db      	b.n	800242c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002274:	4b73      	ldr	r3, [pc, #460]	; (8002444 <HAL_RCC_GetSysClockFreq+0x204>)
 8002276:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002278:	e0db      	b.n	8002432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800227a:	4b73      	ldr	r3, [pc, #460]	; (8002448 <HAL_RCC_GetSysClockFreq+0x208>)
 800227c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800227e:	e0d8      	b.n	8002432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002280:	4b6f      	ldr	r3, [pc, #444]	; (8002440 <HAL_RCC_GetSysClockFreq+0x200>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002288:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800228a:	4b6d      	ldr	r3, [pc, #436]	; (8002440 <HAL_RCC_GetSysClockFreq+0x200>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d063      	beq.n	800235e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002296:	4b6a      	ldr	r3, [pc, #424]	; (8002440 <HAL_RCC_GetSysClockFreq+0x200>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	099b      	lsrs	r3, r3, #6
 800229c:	2200      	movs	r2, #0
 800229e:	63bb      	str	r3, [r7, #56]	; 0x38
 80022a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80022a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a8:	633b      	str	r3, [r7, #48]	; 0x30
 80022aa:	2300      	movs	r3, #0
 80022ac:	637b      	str	r3, [r7, #52]	; 0x34
 80022ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80022b2:	4622      	mov	r2, r4
 80022b4:	462b      	mov	r3, r5
 80022b6:	f04f 0000 	mov.w	r0, #0
 80022ba:	f04f 0100 	mov.w	r1, #0
 80022be:	0159      	lsls	r1, r3, #5
 80022c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022c4:	0150      	lsls	r0, r2, #5
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4621      	mov	r1, r4
 80022cc:	1a51      	subs	r1, r2, r1
 80022ce:	6139      	str	r1, [r7, #16]
 80022d0:	4629      	mov	r1, r5
 80022d2:	eb63 0301 	sbc.w	r3, r3, r1
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022e4:	4659      	mov	r1, fp
 80022e6:	018b      	lsls	r3, r1, #6
 80022e8:	4651      	mov	r1, sl
 80022ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022ee:	4651      	mov	r1, sl
 80022f0:	018a      	lsls	r2, r1, #6
 80022f2:	4651      	mov	r1, sl
 80022f4:	ebb2 0801 	subs.w	r8, r2, r1
 80022f8:	4659      	mov	r1, fp
 80022fa:	eb63 0901 	sbc.w	r9, r3, r1
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800230a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800230e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002312:	4690      	mov	r8, r2
 8002314:	4699      	mov	r9, r3
 8002316:	4623      	mov	r3, r4
 8002318:	eb18 0303 	adds.w	r3, r8, r3
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	462b      	mov	r3, r5
 8002320:	eb49 0303 	adc.w	r3, r9, r3
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002332:	4629      	mov	r1, r5
 8002334:	024b      	lsls	r3, r1, #9
 8002336:	4621      	mov	r1, r4
 8002338:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800233c:	4621      	mov	r1, r4
 800233e:	024a      	lsls	r2, r1, #9
 8002340:	4610      	mov	r0, r2
 8002342:	4619      	mov	r1, r3
 8002344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002346:	2200      	movs	r2, #0
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
 800234a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800234c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002350:	f7fd ff4c 	bl	80001ec <__aeabi_uldivmod>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4613      	mov	r3, r2
 800235a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800235c:	e058      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800235e:	4b38      	ldr	r3, [pc, #224]	; (8002440 <HAL_RCC_GetSysClockFreq+0x200>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	099b      	lsrs	r3, r3, #6
 8002364:	2200      	movs	r2, #0
 8002366:	4618      	mov	r0, r3
 8002368:	4611      	mov	r1, r2
 800236a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800236e:	623b      	str	r3, [r7, #32]
 8002370:	2300      	movs	r3, #0
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
 8002374:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002378:	4642      	mov	r2, r8
 800237a:	464b      	mov	r3, r9
 800237c:	f04f 0000 	mov.w	r0, #0
 8002380:	f04f 0100 	mov.w	r1, #0
 8002384:	0159      	lsls	r1, r3, #5
 8002386:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800238a:	0150      	lsls	r0, r2, #5
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4641      	mov	r1, r8
 8002392:	ebb2 0a01 	subs.w	sl, r2, r1
 8002396:	4649      	mov	r1, r9
 8002398:	eb63 0b01 	sbc.w	fp, r3, r1
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023b0:	ebb2 040a 	subs.w	r4, r2, sl
 80023b4:	eb63 050b 	sbc.w	r5, r3, fp
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	00eb      	lsls	r3, r5, #3
 80023c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023c6:	00e2      	lsls	r2, r4, #3
 80023c8:	4614      	mov	r4, r2
 80023ca:	461d      	mov	r5, r3
 80023cc:	4643      	mov	r3, r8
 80023ce:	18e3      	adds	r3, r4, r3
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	464b      	mov	r3, r9
 80023d4:	eb45 0303 	adc.w	r3, r5, r3
 80023d8:	607b      	str	r3, [r7, #4]
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023e6:	4629      	mov	r1, r5
 80023e8:	028b      	lsls	r3, r1, #10
 80023ea:	4621      	mov	r1, r4
 80023ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023f0:	4621      	mov	r1, r4
 80023f2:	028a      	lsls	r2, r1, #10
 80023f4:	4610      	mov	r0, r2
 80023f6:	4619      	mov	r1, r3
 80023f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023fa:	2200      	movs	r2, #0
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	61fa      	str	r2, [r7, #28]
 8002400:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002404:	f7fd fef2 	bl	80001ec <__aeabi_uldivmod>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4613      	mov	r3, r2
 800240e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_RCC_GetSysClockFreq+0x200>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	0c1b      	lsrs	r3, r3, #16
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	3301      	adds	r3, #1
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002420:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002424:	fbb2 f3f3 	udiv	r3, r2, r3
 8002428:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800242a:	e002      	b.n	8002432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800242c:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_RCC_GetSysClockFreq+0x204>)
 800242e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002434:	4618      	mov	r0, r3
 8002436:	3750      	adds	r7, #80	; 0x50
 8002438:	46bd      	mov	sp, r7
 800243a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800
 8002444:	00f42400 	.word	0x00f42400
 8002448:	007a1200 	.word	0x007a1200

0800244c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002450:	4b03      	ldr	r3, [pc, #12]	; (8002460 <HAL_RCC_GetHCLKFreq+0x14>)
 8002452:	681b      	ldr	r3, [r3, #0]
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	2000014c 	.word	0x2000014c

08002464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002468:	f7ff fff0 	bl	800244c <HAL_RCC_GetHCLKFreq>
 800246c:	4602      	mov	r2, r0
 800246e:	4b05      	ldr	r3, [pc, #20]	; (8002484 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	0a9b      	lsrs	r3, r3, #10
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	4903      	ldr	r1, [pc, #12]	; (8002488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800247a:	5ccb      	ldrb	r3, [r1, r3]
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002480:	4618      	mov	r0, r3
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40023800 	.word	0x40023800
 8002488:	08002e50 	.word	0x08002e50

0800248c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002490:	f7ff ffdc 	bl	800244c <HAL_RCC_GetHCLKFreq>
 8002494:	4602      	mov	r2, r0
 8002496:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	0b5b      	lsrs	r3, r3, #13
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	4903      	ldr	r1, [pc, #12]	; (80024b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024a2:	5ccb      	ldrb	r3, [r1, r3]
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40023800 	.word	0x40023800
 80024b0:	08002e50 	.word	0x08002e50

080024b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e03f      	b.n	8002546 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d106      	bne.n	80024e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7fe fb6a 	bl	8000bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2224      	movs	r2, #36	; 0x24
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f9f5 	bl	80028e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800250c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695a      	ldr	r2, [r3, #20]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800251c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800252c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08c      	sub	sp, #48	; 0x30
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	4613      	mov	r3, r2
 800255c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b20      	cmp	r3, #32
 8002568:	d165      	bne.n	8002636 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d002      	beq.n	8002576 <HAL_UART_Transmit_DMA+0x26>
 8002570:	88fb      	ldrh	r3, [r7, #6]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e05e      	b.n	8002638 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_UART_Transmit_DMA+0x38>
 8002584:	2302      	movs	r3, #2
 8002586:	e057      	b.n	8002638 <HAL_UART_Transmit_DMA+0xe8>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	88fa      	ldrh	r2, [r7, #6]
 800259a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	88fa      	ldrh	r2, [r7, #6]
 80025a0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2221      	movs	r2, #33	; 0x21
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b4:	4a22      	ldr	r2, [pc, #136]	; (8002640 <HAL_UART_Transmit_DMA+0xf0>)
 80025b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025bc:	4a21      	ldr	r2, [pc, #132]	; (8002644 <HAL_UART_Transmit_DMA+0xf4>)
 80025be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c4:	4a20      	ldr	r2, [pc, #128]	; (8002648 <HAL_UART_Transmit_DMA+0xf8>)
 80025c6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025cc:	2200      	movs	r2, #0
 80025ce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80025d0:	f107 0308 	add.w	r3, r7, #8
 80025d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80025da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025dc:	6819      	ldr	r1, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	3304      	adds	r3, #4
 80025e4:	461a      	mov	r2, r3
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	f7fe fe20 	bl	800122c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025f4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	3314      	adds	r3, #20
 8002604:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	e853 3f00 	ldrex	r3, [r3]
 800260c:	617b      	str	r3, [r7, #20]
   return(result);
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002614:	62bb      	str	r3, [r7, #40]	; 0x28
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	3314      	adds	r3, #20
 800261c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800261e:	627a      	str	r2, [r7, #36]	; 0x24
 8002620:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002622:	6a39      	ldr	r1, [r7, #32]
 8002624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002626:	e841 2300 	strex	r3, r2, [r1]
 800262a:	61fb      	str	r3, [r7, #28]
   return(result);
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1e5      	bne.n	80025fe <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	e000      	b.n	8002638 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8002636:	2302      	movs	r3, #2
  }
}
 8002638:	4618      	mov	r0, r3
 800263a:	3730      	adds	r7, #48	; 0x30
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	08002689 	.word	0x08002689
 8002644:	08002723 	.word	0x08002723
 8002648:	0800273f 	.word	0x0800273f

0800264c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b090      	sub	sp, #64	; 0x40
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002694:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d137      	bne.n	8002714 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80026a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026a6:	2200      	movs	r2, #0
 80026a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80026aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	3314      	adds	r3, #20
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	e853 3f00 	ldrex	r3, [r3]
 80026b8:	623b      	str	r3, [r7, #32]
   return(result);
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80026c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	3314      	adds	r3, #20
 80026c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026ca:	633a      	str	r2, [r7, #48]	; 0x30
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026d2:	e841 2300 	strex	r3, r2, [r1]
 80026d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80026d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1e5      	bne.n	80026aa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80026de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	330c      	adds	r3, #12
 80026e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	e853 3f00 	ldrex	r3, [r3]
 80026ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026f4:	637b      	str	r3, [r7, #52]	; 0x34
 80026f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	330c      	adds	r3, #12
 80026fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026fe:	61fa      	str	r2, [r7, #28]
 8002700:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002702:	69b9      	ldr	r1, [r7, #24]
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	e841 2300 	strex	r3, r2, [r1]
 800270a:	617b      	str	r3, [r7, #20]
   return(result);
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1e5      	bne.n	80026de <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002712:	e002      	b.n	800271a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002714:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002716:	f7ff ff99 	bl	800264c <HAL_UART_TxCpltCallback>
}
 800271a:	bf00      	nop
 800271c:	3740      	adds	r7, #64	; 0x40
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7ff ff95 	bl	8002660 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275a:	2b80      	cmp	r3, #128	; 0x80
 800275c:	bf0c      	ite	eq
 800275e:	2301      	moveq	r3, #1
 8002760:	2300      	movne	r3, #0
 8002762:	b2db      	uxtb	r3, r3
 8002764:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b21      	cmp	r3, #33	; 0x21
 8002770:	d108      	bne.n	8002784 <UART_DMAError+0x46>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2200      	movs	r2, #0
 800277c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800277e:	68b8      	ldr	r0, [r7, #8]
 8002780:	f000 f827 	bl	80027d2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278e:	2b40      	cmp	r3, #64	; 0x40
 8002790:	bf0c      	ite	eq
 8002792:	2301      	moveq	r3, #1
 8002794:	2300      	movne	r3, #0
 8002796:	b2db      	uxtb	r3, r3
 8002798:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b22      	cmp	r3, #34	; 0x22
 80027a4:	d108      	bne.n	80027b8 <UART_DMAError+0x7a>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2200      	movs	r2, #0
 80027b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80027b2:	68b8      	ldr	r0, [r7, #8]
 80027b4:	f000 f835 	bl	8002822 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f043 0210 	orr.w	r2, r3, #16
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027c4:	68b8      	ldr	r0, [r7, #8]
 80027c6:	f7ff ff55 	bl	8002674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027ca:	bf00      	nop
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b089      	sub	sp, #36	; 0x24
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	330c      	adds	r3, #12
 80027e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	e853 3f00 	ldrex	r3, [r3]
 80027e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	330c      	adds	r3, #12
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	61ba      	str	r2, [r7, #24]
 80027fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fe:	6979      	ldr	r1, [r7, #20]
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	e841 2300 	strex	r3, r2, [r1]
 8002806:	613b      	str	r3, [r7, #16]
   return(result);
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1e5      	bne.n	80027da <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2220      	movs	r2, #32
 8002812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002816:	bf00      	nop
 8002818:	3724      	adds	r7, #36	; 0x24
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002822:	b480      	push	{r7}
 8002824:	b095      	sub	sp, #84	; 0x54
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	330c      	adds	r3, #12
 8002830:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002834:	e853 3f00 	ldrex	r3, [r3]
 8002838:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800283a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002840:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	330c      	adds	r3, #12
 8002848:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800284a:	643a      	str	r2, [r7, #64]	; 0x40
 800284c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002850:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002852:	e841 2300 	strex	r3, r2, [r1]
 8002856:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1e5      	bne.n	800282a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	3314      	adds	r3, #20
 8002864:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	e853 3f00 	ldrex	r3, [r3]
 800286c:	61fb      	str	r3, [r7, #28]
   return(result);
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	f023 0301 	bic.w	r3, r3, #1
 8002874:	64bb      	str	r3, [r7, #72]	; 0x48
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	3314      	adds	r3, #20
 800287c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800287e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002880:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002882:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002886:	e841 2300 	strex	r3, r2, [r1]
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1e5      	bne.n	800285e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	2b01      	cmp	r3, #1
 8002898:	d119      	bne.n	80028ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	330c      	adds	r3, #12
 80028a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	e853 3f00 	ldrex	r3, [r3]
 80028a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	f023 0310 	bic.w	r3, r3, #16
 80028b0:	647b      	str	r3, [r7, #68]	; 0x44
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	330c      	adds	r3, #12
 80028b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028ba:	61ba      	str	r2, [r7, #24]
 80028bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028be:	6979      	ldr	r1, [r7, #20]
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	e841 2300 	strex	r3, r2, [r1]
 80028c6:	613b      	str	r3, [r7, #16]
   return(result);
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1e5      	bne.n	800289a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	631a      	str	r2, [r3, #48]	; 0x30
}
 80028dc:	bf00      	nop
 80028de:	3754      	adds	r7, #84	; 0x54
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028ec:	b0c0      	sub	sp, #256	; 0x100
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002904:	68d9      	ldr	r1, [r3, #12]
 8002906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	ea40 0301 	orr.w	r3, r0, r1
 8002910:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	431a      	orrs	r2, r3
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	431a      	orrs	r2, r3
 8002928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002940:	f021 010c 	bic.w	r1, r1, #12
 8002944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800294e:	430b      	orrs	r3, r1
 8002950:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800295e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002962:	6999      	ldr	r1, [r3, #24]
 8002964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	ea40 0301 	orr.w	r3, r0, r1
 800296e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	4b8f      	ldr	r3, [pc, #572]	; (8002bb4 <UART_SetConfig+0x2cc>)
 8002978:	429a      	cmp	r2, r3
 800297a:	d005      	beq.n	8002988 <UART_SetConfig+0xa0>
 800297c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	4b8d      	ldr	r3, [pc, #564]	; (8002bb8 <UART_SetConfig+0x2d0>)
 8002984:	429a      	cmp	r2, r3
 8002986:	d104      	bne.n	8002992 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002988:	f7ff fd80 	bl	800248c <HAL_RCC_GetPCLK2Freq>
 800298c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002990:	e003      	b.n	800299a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002992:	f7ff fd67 	bl	8002464 <HAL_RCC_GetPCLK1Freq>
 8002996:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800299a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029a4:	f040 810c 	bne.w	8002bc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029ac:	2200      	movs	r2, #0
 80029ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80029b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80029b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80029ba:	4622      	mov	r2, r4
 80029bc:	462b      	mov	r3, r5
 80029be:	1891      	adds	r1, r2, r2
 80029c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80029c2:	415b      	adcs	r3, r3
 80029c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029ca:	4621      	mov	r1, r4
 80029cc:	eb12 0801 	adds.w	r8, r2, r1
 80029d0:	4629      	mov	r1, r5
 80029d2:	eb43 0901 	adc.w	r9, r3, r1
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029ea:	4690      	mov	r8, r2
 80029ec:	4699      	mov	r9, r3
 80029ee:	4623      	mov	r3, r4
 80029f0:	eb18 0303 	adds.w	r3, r8, r3
 80029f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80029f8:	462b      	mov	r3, r5
 80029fa:	eb49 0303 	adc.w	r3, r9, r3
 80029fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a16:	460b      	mov	r3, r1
 8002a18:	18db      	adds	r3, r3, r3
 8002a1a:	653b      	str	r3, [r7, #80]	; 0x50
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	eb42 0303 	adc.w	r3, r2, r3
 8002a22:	657b      	str	r3, [r7, #84]	; 0x54
 8002a24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a2c:	f7fd fbde 	bl	80001ec <__aeabi_uldivmod>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4b61      	ldr	r3, [pc, #388]	; (8002bbc <UART_SetConfig+0x2d4>)
 8002a36:	fba3 2302 	umull	r2, r3, r3, r2
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	011c      	lsls	r4, r3, #4
 8002a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a42:	2200      	movs	r2, #0
 8002a44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a50:	4642      	mov	r2, r8
 8002a52:	464b      	mov	r3, r9
 8002a54:	1891      	adds	r1, r2, r2
 8002a56:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a58:	415b      	adcs	r3, r3
 8002a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a60:	4641      	mov	r1, r8
 8002a62:	eb12 0a01 	adds.w	sl, r2, r1
 8002a66:	4649      	mov	r1, r9
 8002a68:	eb43 0b01 	adc.w	fp, r3, r1
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a80:	4692      	mov	sl, r2
 8002a82:	469b      	mov	fp, r3
 8002a84:	4643      	mov	r3, r8
 8002a86:	eb1a 0303 	adds.w	r3, sl, r3
 8002a8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a8e:	464b      	mov	r3, r9
 8002a90:	eb4b 0303 	adc.w	r3, fp, r3
 8002a94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002aa4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002aa8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002aac:	460b      	mov	r3, r1
 8002aae:	18db      	adds	r3, r3, r3
 8002ab0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	eb42 0303 	adc.w	r3, r2, r3
 8002ab8:	647b      	str	r3, [r7, #68]	; 0x44
 8002aba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002abe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ac2:	f7fd fb93 	bl	80001ec <__aeabi_uldivmod>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4611      	mov	r1, r2
 8002acc:	4b3b      	ldr	r3, [pc, #236]	; (8002bbc <UART_SetConfig+0x2d4>)
 8002ace:	fba3 2301 	umull	r2, r3, r3, r1
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	2264      	movs	r2, #100	; 0x64
 8002ad6:	fb02 f303 	mul.w	r3, r2, r3
 8002ada:	1acb      	subs	r3, r1, r3
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ae2:	4b36      	ldr	r3, [pc, #216]	; (8002bbc <UART_SetConfig+0x2d4>)
 8002ae4:	fba3 2302 	umull	r2, r3, r3, r2
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002af0:	441c      	add	r4, r3
 8002af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002af6:	2200      	movs	r2, #0
 8002af8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002afc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b04:	4642      	mov	r2, r8
 8002b06:	464b      	mov	r3, r9
 8002b08:	1891      	adds	r1, r2, r2
 8002b0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b0c:	415b      	adcs	r3, r3
 8002b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b14:	4641      	mov	r1, r8
 8002b16:	1851      	adds	r1, r2, r1
 8002b18:	6339      	str	r1, [r7, #48]	; 0x30
 8002b1a:	4649      	mov	r1, r9
 8002b1c:	414b      	adcs	r3, r1
 8002b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b2c:	4659      	mov	r1, fp
 8002b2e:	00cb      	lsls	r3, r1, #3
 8002b30:	4651      	mov	r1, sl
 8002b32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b36:	4651      	mov	r1, sl
 8002b38:	00ca      	lsls	r2, r1, #3
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4603      	mov	r3, r0
 8002b40:	4642      	mov	r2, r8
 8002b42:	189b      	adds	r3, r3, r2
 8002b44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b48:	464b      	mov	r3, r9
 8002b4a:	460a      	mov	r2, r1
 8002b4c:	eb42 0303 	adc.w	r3, r2, r3
 8002b50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b68:	460b      	mov	r3, r1
 8002b6a:	18db      	adds	r3, r3, r3
 8002b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b6e:	4613      	mov	r3, r2
 8002b70:	eb42 0303 	adc.w	r3, r2, r3
 8002b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b7e:	f7fd fb35 	bl	80001ec <__aeabi_uldivmod>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4b0d      	ldr	r3, [pc, #52]	; (8002bbc <UART_SetConfig+0x2d4>)
 8002b88:	fba3 1302 	umull	r1, r3, r3, r2
 8002b8c:	095b      	lsrs	r3, r3, #5
 8002b8e:	2164      	movs	r1, #100	; 0x64
 8002b90:	fb01 f303 	mul.w	r3, r1, r3
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	3332      	adds	r3, #50	; 0x32
 8002b9a:	4a08      	ldr	r2, [pc, #32]	; (8002bbc <UART_SetConfig+0x2d4>)
 8002b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba0:	095b      	lsrs	r3, r3, #5
 8002ba2:	f003 0207 	and.w	r2, r3, #7
 8002ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4422      	add	r2, r4
 8002bae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002bb0:	e105      	b.n	8002dbe <UART_SetConfig+0x4d6>
 8002bb2:	bf00      	nop
 8002bb4:	40011000 	.word	0x40011000
 8002bb8:	40011400 	.word	0x40011400
 8002bbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002bca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002bce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002bd2:	4642      	mov	r2, r8
 8002bd4:	464b      	mov	r3, r9
 8002bd6:	1891      	adds	r1, r2, r2
 8002bd8:	6239      	str	r1, [r7, #32]
 8002bda:	415b      	adcs	r3, r3
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002be2:	4641      	mov	r1, r8
 8002be4:	1854      	adds	r4, r2, r1
 8002be6:	4649      	mov	r1, r9
 8002be8:	eb43 0501 	adc.w	r5, r3, r1
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	00eb      	lsls	r3, r5, #3
 8002bf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bfa:	00e2      	lsls	r2, r4, #3
 8002bfc:	4614      	mov	r4, r2
 8002bfe:	461d      	mov	r5, r3
 8002c00:	4643      	mov	r3, r8
 8002c02:	18e3      	adds	r3, r4, r3
 8002c04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c08:	464b      	mov	r3, r9
 8002c0a:	eb45 0303 	adc.w	r3, r5, r3
 8002c0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c2e:	4629      	mov	r1, r5
 8002c30:	008b      	lsls	r3, r1, #2
 8002c32:	4621      	mov	r1, r4
 8002c34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c38:	4621      	mov	r1, r4
 8002c3a:	008a      	lsls	r2, r1, #2
 8002c3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002c40:	f7fd fad4 	bl	80001ec <__aeabi_uldivmod>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4b60      	ldr	r3, [pc, #384]	; (8002dcc <UART_SetConfig+0x4e4>)
 8002c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	011c      	lsls	r4, r3, #4
 8002c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c56:	2200      	movs	r2, #0
 8002c58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c64:	4642      	mov	r2, r8
 8002c66:	464b      	mov	r3, r9
 8002c68:	1891      	adds	r1, r2, r2
 8002c6a:	61b9      	str	r1, [r7, #24]
 8002c6c:	415b      	adcs	r3, r3
 8002c6e:	61fb      	str	r3, [r7, #28]
 8002c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c74:	4641      	mov	r1, r8
 8002c76:	1851      	adds	r1, r2, r1
 8002c78:	6139      	str	r1, [r7, #16]
 8002c7a:	4649      	mov	r1, r9
 8002c7c:	414b      	adcs	r3, r1
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c8c:	4659      	mov	r1, fp
 8002c8e:	00cb      	lsls	r3, r1, #3
 8002c90:	4651      	mov	r1, sl
 8002c92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c96:	4651      	mov	r1, sl
 8002c98:	00ca      	lsls	r2, r1, #3
 8002c9a:	4610      	mov	r0, r2
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	4642      	mov	r2, r8
 8002ca2:	189b      	adds	r3, r3, r2
 8002ca4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ca8:	464b      	mov	r3, r9
 8002caa:	460a      	mov	r2, r1
 8002cac:	eb42 0303 	adc.w	r3, r2, r3
 8002cb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cbe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ccc:	4649      	mov	r1, r9
 8002cce:	008b      	lsls	r3, r1, #2
 8002cd0:	4641      	mov	r1, r8
 8002cd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cd6:	4641      	mov	r1, r8
 8002cd8:	008a      	lsls	r2, r1, #2
 8002cda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002cde:	f7fd fa85 	bl	80001ec <__aeabi_uldivmod>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4b39      	ldr	r3, [pc, #228]	; (8002dcc <UART_SetConfig+0x4e4>)
 8002ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8002cec:	095b      	lsrs	r3, r3, #5
 8002cee:	2164      	movs	r1, #100	; 0x64
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	3332      	adds	r3, #50	; 0x32
 8002cfa:	4a34      	ldr	r2, [pc, #208]	; (8002dcc <UART_SetConfig+0x4e4>)
 8002cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002d00:	095b      	lsrs	r3, r3, #5
 8002d02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d06:	441c      	add	r4, r3
 8002d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	673b      	str	r3, [r7, #112]	; 0x70
 8002d10:	677a      	str	r2, [r7, #116]	; 0x74
 8002d12:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d16:	4642      	mov	r2, r8
 8002d18:	464b      	mov	r3, r9
 8002d1a:	1891      	adds	r1, r2, r2
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	415b      	adcs	r3, r3
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d26:	4641      	mov	r1, r8
 8002d28:	1851      	adds	r1, r2, r1
 8002d2a:	6039      	str	r1, [r7, #0]
 8002d2c:	4649      	mov	r1, r9
 8002d2e:	414b      	adcs	r3, r1
 8002d30:	607b      	str	r3, [r7, #4]
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d3e:	4659      	mov	r1, fp
 8002d40:	00cb      	lsls	r3, r1, #3
 8002d42:	4651      	mov	r1, sl
 8002d44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d48:	4651      	mov	r1, sl
 8002d4a:	00ca      	lsls	r2, r1, #3
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4603      	mov	r3, r0
 8002d52:	4642      	mov	r2, r8
 8002d54:	189b      	adds	r3, r3, r2
 8002d56:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d58:	464b      	mov	r3, r9
 8002d5a:	460a      	mov	r2, r1
 8002d5c:	eb42 0303 	adc.w	r3, r2, r3
 8002d60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	663b      	str	r3, [r7, #96]	; 0x60
 8002d6c:	667a      	str	r2, [r7, #100]	; 0x64
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d7a:	4649      	mov	r1, r9
 8002d7c:	008b      	lsls	r3, r1, #2
 8002d7e:	4641      	mov	r1, r8
 8002d80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d84:	4641      	mov	r1, r8
 8002d86:	008a      	lsls	r2, r1, #2
 8002d88:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d8c:	f7fd fa2e 	bl	80001ec <__aeabi_uldivmod>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4b0d      	ldr	r3, [pc, #52]	; (8002dcc <UART_SetConfig+0x4e4>)
 8002d96:	fba3 1302 	umull	r1, r3, r3, r2
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	2164      	movs	r1, #100	; 0x64
 8002d9e:	fb01 f303 	mul.w	r3, r1, r3
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	3332      	adds	r3, #50	; 0x32
 8002da8:	4a08      	ldr	r2, [pc, #32]	; (8002dcc <UART_SetConfig+0x4e4>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	f003 020f 	and.w	r2, r3, #15
 8002db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4422      	add	r2, r4
 8002dbc:	609a      	str	r2, [r3, #8]
}
 8002dbe:	bf00      	nop
 8002dc0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dca:	bf00      	nop
 8002dcc:	51eb851f 	.word	0x51eb851f

08002dd0 <__libc_init_array>:
 8002dd0:	b570      	push	{r4, r5, r6, lr}
 8002dd2:	4d0d      	ldr	r5, [pc, #52]	; (8002e08 <__libc_init_array+0x38>)
 8002dd4:	4c0d      	ldr	r4, [pc, #52]	; (8002e0c <__libc_init_array+0x3c>)
 8002dd6:	1b64      	subs	r4, r4, r5
 8002dd8:	10a4      	asrs	r4, r4, #2
 8002dda:	2600      	movs	r6, #0
 8002ddc:	42a6      	cmp	r6, r4
 8002dde:	d109      	bne.n	8002df4 <__libc_init_array+0x24>
 8002de0:	4d0b      	ldr	r5, [pc, #44]	; (8002e10 <__libc_init_array+0x40>)
 8002de2:	4c0c      	ldr	r4, [pc, #48]	; (8002e14 <__libc_init_array+0x44>)
 8002de4:	f000 f820 	bl	8002e28 <_init>
 8002de8:	1b64      	subs	r4, r4, r5
 8002dea:	10a4      	asrs	r4, r4, #2
 8002dec:	2600      	movs	r6, #0
 8002dee:	42a6      	cmp	r6, r4
 8002df0:	d105      	bne.n	8002dfe <__libc_init_array+0x2e>
 8002df2:	bd70      	pop	{r4, r5, r6, pc}
 8002df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002df8:	4798      	blx	r3
 8002dfa:	3601      	adds	r6, #1
 8002dfc:	e7ee      	b.n	8002ddc <__libc_init_array+0xc>
 8002dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e02:	4798      	blx	r3
 8002e04:	3601      	adds	r6, #1
 8002e06:	e7f2      	b.n	8002dee <__libc_init_array+0x1e>
 8002e08:	08002e68 	.word	0x08002e68
 8002e0c:	08002e68 	.word	0x08002e68
 8002e10:	08002e68 	.word	0x08002e68
 8002e14:	08002e6c 	.word	0x08002e6c

08002e18 <memset>:
 8002e18:	4402      	add	r2, r0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d100      	bne.n	8002e22 <memset+0xa>
 8002e20:	4770      	bx	lr
 8002e22:	f803 1b01 	strb.w	r1, [r3], #1
 8002e26:	e7f9      	b.n	8002e1c <memset+0x4>

08002e28 <_init>:
 8002e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e2a:	bf00      	nop
 8002e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e2e:	bc08      	pop	{r3}
 8002e30:	469e      	mov	lr, r3
 8002e32:	4770      	bx	lr

08002e34 <_fini>:
 8002e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e36:	bf00      	nop
 8002e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e3a:	bc08      	pop	{r3}
 8002e3c:	469e      	mov	lr, r3
 8002e3e:	4770      	bx	lr
