
Led_Toggle_DMA_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022e4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002490  08002490  00012490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024a8  080024a8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080024a8  080024a8  000124a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024b0  080024b0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024b0  080024b0  000124b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024b4  080024b4  000124b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080024b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000080  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000090  20000090  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004cd4  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011ca  00000000  00000000  00024d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004a8  00000000  00000000  00025ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000410  00000000  00000000  00026388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021b45  00000000  00000000  00026798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005a52  00000000  00000000  000482dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc284  00000000  00000000  0004dd2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00119fb3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001110  00000000  00000000  0011a004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002478 	.word	0x08002478

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08002478 	.word	0x08002478

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fbfe 	bl	8000cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f832 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f8f0 	bl	80006e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000500:	f000 f89a 	bl	8000638 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream0, HAL_DMA_XFER_CPLT_CB_ID, &Usercallback);
 8000504:	4a0c      	ldr	r2, [pc, #48]	; (8000538 <main+0x48>)
 8000506:	2100      	movs	r1, #0
 8000508:	480c      	ldr	r0, [pc, #48]	; (800053c <main+0x4c>)
 800050a:	f001 f82b 	bl	8001564 <HAL_DMA_RegisterCallback>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0, (uint32_t)&led_data[0], (uint32_t)&GPIOG->ODR, 2);
 800050e:	490c      	ldr	r1, [pc, #48]	; (8000540 <main+0x50>)
 8000510:	2302      	movs	r3, #2
 8000512:	4a0c      	ldr	r2, [pc, #48]	; (8000544 <main+0x54>)
 8000514:	4809      	ldr	r0, [pc, #36]	; (800053c <main+0x4c>)
 8000516:	f000 fe43 	bl	80011a0 <HAL_DMA_Start_IT>

	  HAL_Delay(500);
 800051a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800051e:	f000 fc5b 	bl	8000dd8 <HAL_Delay>

	  HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0, (uint32_t)&led_data[1], (uint32_t)&GPIOG->ODR, 2);
 8000522:	4909      	ldr	r1, [pc, #36]	; (8000548 <main+0x58>)
 8000524:	2302      	movs	r3, #2
 8000526:	4a07      	ldr	r2, [pc, #28]	; (8000544 <main+0x54>)
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <main+0x4c>)
 800052a:	f000 fe39 	bl	80011a0 <HAL_DMA_Start_IT>

	  HAL_Delay(500);
 800052e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000532:	f000 fc51 	bl	8000dd8 <HAL_Delay>
	  HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0, (uint32_t)&led_data[0], (uint32_t)&GPIOG->ODR, 2);
 8000536:	e7ea      	b.n	800050e <main+0x1e>
 8000538:	0800054d 	.word	0x0800054d
 800053c:	2000002c 	.word	0x2000002c
 8000540:	20000000 	.word	0x20000000
 8000544:	40021814 	.word	0x40021814
 8000548:	20000002 	.word	0x20000002

0800054c <Usercallback>:
  /* USER CODE END 3 */
}


void Usercallback(DMA_HandleTypeDef *pHandle)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]

}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	; 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f001 ff7a 	bl	8002468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b29      	ldr	r3, [pc, #164]	; (8000630 <SystemClock_Config+0xd0>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	4a28      	ldr	r2, [pc, #160]	; (8000630 <SystemClock_Config+0xd0>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	; 0x40
 8000594:	4b26      	ldr	r3, [pc, #152]	; (8000630 <SystemClock_Config+0xd0>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <SystemClock_Config+0xd4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ac:	4a21      	ldr	r2, [pc, #132]	; (8000634 <SystemClock_Config+0xd4>)
 80005ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <SystemClock_Config+0xd4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2310      	movs	r3, #16
 80005ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d4:	2308      	movs	r3, #8
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005d8:	2332      	movs	r3, #50	; 0x32
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005dc:	2304      	movs	r3, #4
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e0:	2307      	movs	r3, #7
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0320 	add.w	r3, r7, #32
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fab5 	bl	8001b58 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005f4:	f000 fae0 	bl	8000bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000604:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000608:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800060a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800060e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f001 fd16 	bl	8002048 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000622:	f000 fac9 	bl	8000bb8 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	; 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	4b24      	ldr	r3, [pc, #144]	; (80006d4 <MX_DMA_Init+0x9c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a23      	ldr	r2, [pc, #140]	; (80006d4 <MX_DMA_Init+0x9c>)
 8000648:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <MX_DMA_Init+0x9c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800065a:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <MX_DMA_Init+0xa0>)
 800065c:	4a1f      	ldr	r2, [pc, #124]	; (80006dc <MX_DMA_Init+0xa4>)
 800065e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000660:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <MX_DMA_Init+0xa0>)
 8000662:	2200      	movs	r2, #0
 8000664:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000666:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <MX_DMA_Init+0xa0>)
 8000668:	2280      	movs	r2, #128	; 0x80
 800066a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_DISABLE;
 800066c:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_DMA_Init+0xa0>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_DISABLE;
 8000672:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <MX_DMA_Init+0xa0>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000678:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <MX_DMA_Init+0xa0>)
 800067a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800067e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_DMA_Init+0xa0>)
 8000682:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000686:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_DMA_Init+0xa0>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_DMA_Init+0xa0>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000694:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_DMA_Init+0xa0>)
 8000696:	2204      	movs	r2, #4
 8000698:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_DMA_Init+0xa0>)
 800069c:	2203      	movs	r2, #3
 800069e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 80006a0:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <MX_DMA_Init+0xa0>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_DMA_Init+0xa0>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 80006ac:	480a      	ldr	r0, [pc, #40]	; (80006d8 <MX_DMA_Init+0xa0>)
 80006ae:	f000 fcc9 	bl	8001044 <HAL_DMA_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_DMA_Init+0x84>
  {
    Error_Handler( );
 80006b8:	f000 fa7e 	bl	8000bb8 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006bc:	2200      	movs	r2, #0
 80006be:	2100      	movs	r1, #0
 80006c0:	2038      	movs	r0, #56	; 0x38
 80006c2:	f000 fc88 	bl	8000fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006c6:	2038      	movs	r0, #56	; 0x38
 80006c8:	f000 fca1 	bl	800100e <HAL_NVIC_EnableIRQ>

}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40023800 	.word	0x40023800
 80006d8:	2000002c 	.word	0x2000002c
 80006dc:	40026410 	.word	0x40026410

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08e      	sub	sp, #56	; 0x38
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	623b      	str	r3, [r7, #32]
 80006fa:	4bb2      	ldr	r3, [pc, #712]	; (80009c4 <MX_GPIO_Init+0x2e4>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4ab1      	ldr	r2, [pc, #708]	; (80009c4 <MX_GPIO_Init+0x2e4>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4baf      	ldr	r3, [pc, #700]	; (80009c4 <MX_GPIO_Init+0x2e4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	623b      	str	r3, [r7, #32]
 8000710:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
 8000716:	4bab      	ldr	r3, [pc, #684]	; (80009c4 <MX_GPIO_Init+0x2e4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4aaa      	ldr	r2, [pc, #680]	; (80009c4 <MX_GPIO_Init+0x2e4>)
 800071c:	f043 0320 	orr.w	r3, r3, #32
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4ba8      	ldr	r3, [pc, #672]	; (80009c4 <MX_GPIO_Init+0x2e4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0320 	and.w	r3, r3, #32
 800072a:	61fb      	str	r3, [r7, #28]
 800072c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
 8000732:	4ba4      	ldr	r3, [pc, #656]	; (80009c4 <MX_GPIO_Init+0x2e4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4aa3      	ldr	r2, [pc, #652]	; (80009c4 <MX_GPIO_Init+0x2e4>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4ba1      	ldr	r3, [pc, #644]	; (80009c4 <MX_GPIO_Init+0x2e4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	4b9d      	ldr	r3, [pc, #628]	; (80009c4 <MX_GPIO_Init+0x2e4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a9c      	ldr	r2, [pc, #624]	; (80009c4 <MX_GPIO_Init+0x2e4>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b9a      	ldr	r3, [pc, #616]	; (80009c4 <MX_GPIO_Init+0x2e4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	4b96      	ldr	r3, [pc, #600]	; (80009c4 <MX_GPIO_Init+0x2e4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a95      	ldr	r2, [pc, #596]	; (80009c4 <MX_GPIO_Init+0x2e4>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b93      	ldr	r3, [pc, #588]	; (80009c4 <MX_GPIO_Init+0x2e4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4b8f      	ldr	r3, [pc, #572]	; (80009c4 <MX_GPIO_Init+0x2e4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a8e      	ldr	r2, [pc, #568]	; (80009c4 <MX_GPIO_Init+0x2e4>)
 800078c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b8c      	ldr	r3, [pc, #560]	; (80009c4 <MX_GPIO_Init+0x2e4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b88      	ldr	r3, [pc, #544]	; (80009c4 <MX_GPIO_Init+0x2e4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a87      	ldr	r2, [pc, #540]	; (80009c4 <MX_GPIO_Init+0x2e4>)
 80007a8:	f043 0310 	orr.w	r3, r3, #16
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b85      	ldr	r3, [pc, #532]	; (80009c4 <MX_GPIO_Init+0x2e4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0310 	and.w	r3, r3, #16
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b81      	ldr	r3, [pc, #516]	; (80009c4 <MX_GPIO_Init+0x2e4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a80      	ldr	r2, [pc, #512]	; (80009c4 <MX_GPIO_Init+0x2e4>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b7e      	ldr	r3, [pc, #504]	; (80009c4 <MX_GPIO_Init+0x2e4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2116      	movs	r1, #22
 80007da:	487b      	ldr	r0, [pc, #492]	; (80009c8 <MX_GPIO_Init+0x2e8>)
 80007dc:	f001 f9a2 	bl	8001b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2180      	movs	r1, #128	; 0x80
 80007e4:	4879      	ldr	r0, [pc, #484]	; (80009cc <MX_GPIO_Init+0x2ec>)
 80007e6:	f001 f99d 	bl	8001b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80007f0:	4877      	ldr	r0, [pc, #476]	; (80009d0 <MX_GPIO_Init+0x2f0>)
 80007f2:	f001 f997 	bl	8001b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80007fc:	4875      	ldr	r0, [pc, #468]	; (80009d4 <MX_GPIO_Init+0x2f4>)
 80007fe:	f001 f991 	bl	8001b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000802:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000810:	2303      	movs	r3, #3
 8000812:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000814:	230c      	movs	r3, #12
 8000816:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081c:	4619      	mov	r1, r3
 800081e:	486e      	ldr	r0, [pc, #440]	; (80009d8 <MX_GPIO_Init+0x2f8>)
 8000820:	f000 ffd4 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000824:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082a:	2302      	movs	r3, #2
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000836:	2305      	movs	r3, #5
 8000838:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083e:	4619      	mov	r1, r3
 8000840:	4865      	ldr	r0, [pc, #404]	; (80009d8 <MX_GPIO_Init+0x2f8>)
 8000842:	f000 ffc3 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000858:	230e      	movs	r3, #14
 800085a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000860:	4619      	mov	r1, r3
 8000862:	485d      	ldr	r0, [pc, #372]	; (80009d8 <MX_GPIO_Init+0x2f8>)
 8000864:	f000 ffb2 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000868:	2301      	movs	r3, #1
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000874:	2303      	movs	r3, #3
 8000876:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000878:	230c      	movs	r3, #12
 800087a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000880:	4619      	mov	r1, r3
 8000882:	4851      	ldr	r0, [pc, #324]	; (80009c8 <MX_GPIO_Init+0x2e8>)
 8000884:	f000 ffa2 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000888:	2316      	movs	r3, #22
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089c:	4619      	mov	r1, r3
 800089e:	484a      	ldr	r0, [pc, #296]	; (80009c8 <MX_GPIO_Init+0x2e8>)
 80008a0:	f000 ff94 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80008a4:	f248 0307 	movw	r3, #32775	; 0x8007
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008aa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b8:	4619      	mov	r1, r3
 80008ba:	4844      	ldr	r0, [pc, #272]	; (80009cc <MX_GPIO_Init+0x2ec>)
 80008bc:	f000 ff86 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80008c0:	f641 0358 	movw	r3, #6232	; 0x1858
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008d2:	230e      	movs	r3, #14
 80008d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008da:	4619      	mov	r1, r3
 80008dc:	483b      	ldr	r0, [pc, #236]	; (80009cc <MX_GPIO_Init+0x2ec>)
 80008de:	f000 ff75 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80008e2:	2380      	movs	r3, #128	; 0x80
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f6:	4619      	mov	r1, r3
 80008f8:	4834      	ldr	r0, [pc, #208]	; (80009cc <MX_GPIO_Init+0x2ec>)
 80008fa:	f000 ff67 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80008fe:	2320      	movs	r3, #32
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000902:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000910:	4619      	mov	r1, r3
 8000912:	482d      	ldr	r0, [pc, #180]	; (80009c8 <MX_GPIO_Init+0x2e8>)
 8000914:	f000 ff5a 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000918:	2303      	movs	r3, #3
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000928:	2309      	movs	r3, #9
 800092a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000930:	4619      	mov	r1, r3
 8000932:	482a      	ldr	r0, [pc, #168]	; (80009dc <MX_GPIO_Init+0x2fc>)
 8000934:	f000 ff4a 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000938:	2304      	movs	r3, #4
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000948:	4619      	mov	r1, r3
 800094a:	4824      	ldr	r0, [pc, #144]	; (80009dc <MX_GPIO_Init+0x2fc>)
 800094c:	f000 ff3e 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000950:	f248 1333 	movw	r3, #33075	; 0x8133
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000962:	230c      	movs	r3, #12
 8000964:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096a:	4619      	mov	r1, r3
 800096c:	4819      	ldr	r0, [pc, #100]	; (80009d4 <MX_GPIO_Init+0x2f4>)
 800096e:	f000 ff2d 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000972:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000984:	230c      	movs	r3, #12
 8000986:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098c:	4619      	mov	r1, r3
 800098e:	4814      	ldr	r0, [pc, #80]	; (80009e0 <MX_GPIO_Init+0x300>)
 8000990:	f000 ff1c 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000994:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009a6:	230e      	movs	r3, #14
 80009a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	4619      	mov	r1, r3
 80009b0:	480a      	ldr	r0, [pc, #40]	; (80009dc <MX_GPIO_Init+0x2fc>)
 80009b2:	f000 ff0b 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80009b6:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
 80009c0:	e010      	b.n	80009e4 <MX_GPIO_Init+0x304>
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020800 	.word	0x40020800
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020c00 	.word	0x40020c00
 80009d4:	40021800 	.word	0x40021800
 80009d8:	40021400 	.word	0x40021400
 80009dc:	40020400 	.word	0x40020400
 80009e0:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80009ec:	230c      	movs	r3, #12
 80009ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f4:	4619      	mov	r1, r3
 80009f6:	486b      	ldr	r0, [pc, #428]	; (8000ba4 <MX_GPIO_Init+0x4c4>)
 80009f8:	f000 fee8 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80009fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4864      	ldr	r0, [pc, #400]	; (8000ba4 <MX_GPIO_Init+0x4c4>)
 8000a12:	f000 fedb 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000a16:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a28:	230c      	movs	r3, #12
 8000a2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a30:	4619      	mov	r1, r3
 8000a32:	485d      	ldr	r0, [pc, #372]	; (8000ba8 <MX_GPIO_Init+0x4c8>)
 8000a34:	f000 feca 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000a38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4856      	ldr	r0, [pc, #344]	; (8000ba8 <MX_GPIO_Init+0x4c8>)
 8000a4e:	f000 febd 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000a52:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	484f      	ldr	r0, [pc, #316]	; (8000ba8 <MX_GPIO_Init+0x4c8>)
 8000a6c:	f000 feae 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000a70:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a82:	230e      	movs	r3, #14
 8000a84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4847      	ldr	r0, [pc, #284]	; (8000bac <MX_GPIO_Init+0x4cc>)
 8000a8e:	f000 fe9d 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000a92:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000aa4:	230e      	movs	r3, #14
 8000aa6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aac:	4619      	mov	r1, r3
 8000aae:	4840      	ldr	r0, [pc, #256]	; (8000bb0 <MX_GPIO_Init+0x4d0>)
 8000ab0:	f000 fe8c 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aba:	2312      	movs	r3, #18
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4837      	ldr	r0, [pc, #220]	; (8000bb0 <MX_GPIO_Init+0x4d0>)
 8000ad2:	f000 fe7b 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000adc:	2312      	movs	r3, #18
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ae8:	2304      	movs	r3, #4
 8000aea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af0:	4619      	mov	r1, r3
 8000af2:	4830      	ldr	r0, [pc, #192]	; (8000bb4 <MX_GPIO_Init+0x4d4>)
 8000af4:	f000 fe6a 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000af8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b06:	2303      	movs	r3, #3
 8000b08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b0a:	2307      	movs	r3, #7
 8000b0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b12:	4619      	mov	r1, r3
 8000b14:	4827      	ldr	r0, [pc, #156]	; (8000bb4 <MX_GPIO_Init+0x4d4>)
 8000b16:	f000 fe59 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000b1a:	2348      	movs	r3, #72	; 0x48
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b2a:	230e      	movs	r3, #14
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4619      	mov	r1, r3
 8000b34:	481c      	ldr	r0, [pc, #112]	; (8000ba8 <MX_GPIO_Init+0x4c8>)
 8000b36:	f000 fe49 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000b3a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000b4c:	2309      	movs	r3, #9
 8000b4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	4815      	ldr	r0, [pc, #84]	; (8000bac <MX_GPIO_Init+0x4cc>)
 8000b58:	f000 fe38 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000b5c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b72:	4619      	mov	r1, r3
 8000b74:	480d      	ldr	r0, [pc, #52]	; (8000bac <MX_GPIO_Init+0x4cc>)
 8000b76:	f000 fe29 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000b7a:	2360      	movs	r3, #96	; 0x60
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b8a:	230c      	movs	r3, #12
 8000b8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b92:	4619      	mov	r1, r3
 8000b94:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <MX_GPIO_Init+0x4c4>)
 8000b96:	f000 fe19 	bl	80017cc <HAL_GPIO_Init>

}
 8000b9a:	bf00      	nop
 8000b9c:	3738      	adds	r7, #56	; 0x38
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40020400 	.word	0x40020400
 8000ba8:	40020c00 	.word	0x40020c00
 8000bac:	40021800 	.word	0x40021800
 8000bb0:	40020800 	.word	0x40020800
 8000bb4:	40020000 	.word	0x40020000

08000bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bbc:	b672      	cpsid	i
}
 8000bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <Error_Handler+0x8>
	...

08000bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	4a0f      	ldr	r2, [pc, #60]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c02:	2007      	movs	r0, #7
 8000c04:	f000 f9dc 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40023800 	.word	0x40023800

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <NMI_Handler+0x4>

08000c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <MemManage_Handler+0x4>

08000c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c60:	f000 f89a 	bl	8000d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <DMA2_Stream0_IRQHandler+0x10>)
 8000c6e:	f000 faef 	bl	8001250 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	2000002c 	.word	0x2000002c

08000c7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <SystemInit+0x20>)
 8000c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c86:	4a05      	ldr	r2, [pc, #20]	; (8000c9c <SystemInit+0x20>)
 8000c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ca6:	490e      	ldr	r1, [pc, #56]	; (8000ce0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ca8:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cbc:	4c0b      	ldr	r4, [pc, #44]	; (8000cec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cca:	f7ff ffd7 	bl	8000c7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cce:	f001 fba7 	bl	8002420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd2:	f7ff fc0d 	bl	80004f0 <main>
  bx  lr    
 8000cd6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cd8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ce4:	080024b8 	.word	0x080024b8
  ldr r2, =_sbss
 8000ce8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000cec:	20000090 	.word	0x20000090

08000cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC_IRQHandler>
	...

08000cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <HAL_Init+0x40>)
 8000cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <HAL_Init+0x40>)
 8000d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <HAL_Init+0x40>)
 8000d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f000 f94f 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d22:	2000      	movs	r0, #0
 8000d24:	f000 f808 	bl	8000d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d28:	f7ff ff4c 	bl	8000bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023c00 	.word	0x40023c00

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_InitTick+0x54>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x58>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f967 	bl	800102a <HAL_SYSTICK_Config>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00e      	b.n	8000d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b0f      	cmp	r3, #15
 8000d6a:	d80a      	bhi.n	8000d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f000 f92f 	bl	8000fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d78:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <HAL_InitTick+0x5c>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e000      	b.n	8000d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000004 	.word	0x20000004
 8000d90:	2000000c 	.word	0x2000000c
 8000d94:	20000008 	.word	0x20000008

08000d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x20>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x24>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <HAL_IncTick+0x24>)
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	2000000c 	.word	0x2000000c
 8000dbc:	2000008c 	.word	0x2000008c

08000dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_GetTick+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	2000008c 	.word	0x2000008c

08000dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de0:	f7ff ffee 	bl	8000dc0 <HAL_GetTick>
 8000de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df0:	d005      	beq.n	8000dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_Delay+0x44>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dfe:	bf00      	nop
 8000e00:	f7ff ffde 	bl	8000dc0 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d8f7      	bhi.n	8000e00 <HAL_Delay+0x28>
  {
  }
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	2000000c 	.word	0x2000000c

08000e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e52:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	60d3      	str	r3, [r2, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <__NVIC_GetPriorityGrouping+0x18>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	f003 0307 	and.w	r3, r3, #7
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db0b      	blt.n	8000eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	f003 021f 	and.w	r2, r3, #31
 8000e9c:	4907      	ldr	r1, [pc, #28]	; (8000ebc <__NVIC_EnableIRQ+0x38>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	095b      	lsrs	r3, r3, #5
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000e100 	.word	0xe000e100

08000ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	; (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	; (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f1c3 0307 	rsb	r3, r3, #7
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf28      	it	cs
 8000f32:	2304      	movcs	r3, #4
 8000f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d902      	bls.n	8000f44 <NVIC_EncodePriority+0x30>
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3b03      	subs	r3, #3
 8000f42:	e000      	b.n	8000f46 <NVIC_EncodePriority+0x32>
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43da      	mvns	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	4313      	orrs	r3, r2
         );
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	; 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f8c:	d301      	bcc.n	8000f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00f      	b.n	8000fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <SysTick_Config+0x40>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa0:	f7ff ff8e 	bl	8000ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <SysTick_Config+0x40>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000faa:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <SysTick_Config+0x40>)
 8000fac:	2207      	movs	r2, #7
 8000fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	e000e010 	.word	0xe000e010

08000fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff29 	bl	8000e20 <__NVIC_SetPriorityGrouping>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe8:	f7ff ff3e 	bl	8000e68 <__NVIC_GetPriorityGrouping>
 8000fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	6978      	ldr	r0, [r7, #20]
 8000ff4:	f7ff ff8e 	bl	8000f14 <NVIC_EncodePriority>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff5d 	bl	8000ec0 <__NVIC_SetPriority>
}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff31 	bl	8000e84 <__NVIC_EnableIRQ>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffa2 	bl	8000f7c <SysTick_Config>
 8001038:	4603      	mov	r3, r0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001050:	f7ff feb6 	bl	8000dc0 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d101      	bne.n	8001060 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e099      	b.n	8001194 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2202      	movs	r2, #2
 8001064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f022 0201 	bic.w	r2, r2, #1
 800107e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001080:	e00f      	b.n	80010a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001082:	f7ff fe9d 	bl	8000dc0 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b05      	cmp	r3, #5
 800108e:	d908      	bls.n	80010a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2220      	movs	r2, #32
 8001094:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2203      	movs	r2, #3
 800109a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e078      	b.n	8001194 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1e8      	bne.n	8001082 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	4b38      	ldr	r3, [pc, #224]	; (800119c <HAL_DMA_Init+0x158>)
 80010bc:	4013      	ands	r3, r2
 80010be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d107      	bne.n	800110c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	4313      	orrs	r3, r2
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	4313      	orrs	r3, r2
 800110a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	f023 0307 	bic.w	r3, r3, #7
 8001122:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	4313      	orrs	r3, r2
 800112c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	2b04      	cmp	r3, #4
 8001134:	d117      	bne.n	8001166 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	4313      	orrs	r3, r2
 800113e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00e      	beq.n	8001166 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 fac3 	bl	80016d4 <DMA_CheckFifoParam>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d008      	beq.n	8001166 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2240      	movs	r2, #64	; 0x40
 8001158:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2201      	movs	r2, #1
 800115e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001162:	2301      	movs	r3, #1
 8001164:	e016      	b.n	8001194 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 fa7a 	bl	8001668 <DMA_CalcBaseAndBitshift>
 8001174:	4603      	mov	r3, r0
 8001176:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117c:	223f      	movs	r2, #63	; 0x3f
 800117e:	409a      	lsls	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	f010803f 	.word	0xf010803f

080011a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d101      	bne.n	80011c6 <HAL_DMA_Start_IT+0x26>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e040      	b.n	8001248 <HAL_DMA_Start_IT+0xa8>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2201      	movs	r2, #1
 80011ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d12f      	bne.n	800123a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2202      	movs	r2, #2
 80011de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2200      	movs	r2, #0
 80011e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f000 fa0c 	bl	800160c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f8:	223f      	movs	r2, #63	; 0x3f
 80011fa:	409a      	lsls	r2, r3
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 0216 	orr.w	r2, r2, #22
 800120e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	2b00      	cmp	r3, #0
 8001216:	d007      	beq.n	8001228 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 0208 	orr.w	r2, r2, #8
 8001226:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f042 0201 	orr.w	r2, r2, #1
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	e005      	b.n	8001246 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001242:	2302      	movs	r3, #2
 8001244:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001246:	7dfb      	ldrb	r3, [r7, #23]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800125c:	4b8e      	ldr	r3, [pc, #568]	; (8001498 <HAL_DMA_IRQHandler+0x248>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a8e      	ldr	r2, [pc, #568]	; (800149c <HAL_DMA_IRQHandler+0x24c>)
 8001262:	fba2 2303 	umull	r2, r3, r2, r3
 8001266:	0a9b      	lsrs	r3, r3, #10
 8001268:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800127a:	2208      	movs	r2, #8
 800127c:	409a      	lsls	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4013      	ands	r3, r2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d01a      	beq.n	80012bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	d013      	beq.n	80012bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 0204 	bic.w	r2, r2, #4
 80012a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a8:	2208      	movs	r2, #8
 80012aa:	409a      	lsls	r2, r3
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b4:	f043 0201 	orr.w	r2, r3, #1
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c0:	2201      	movs	r2, #1
 80012c2:	409a      	lsls	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d012      	beq.n	80012f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00b      	beq.n	80012f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012de:	2201      	movs	r2, #1
 80012e0:	409a      	lsls	r2, r3
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ea:	f043 0202 	orr.w	r2, r3, #2
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f6:	2204      	movs	r2, #4
 80012f8:	409a      	lsls	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d012      	beq.n	8001328 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00b      	beq.n	8001328 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001314:	2204      	movs	r2, #4
 8001316:	409a      	lsls	r2, r3
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001320:	f043 0204 	orr.w	r2, r3, #4
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132c:	2210      	movs	r2, #16
 800132e:	409a      	lsls	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4013      	ands	r3, r2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d043      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	2b00      	cmp	r3, #0
 8001344:	d03c      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134a:	2210      	movs	r2, #16
 800134c:	409a      	lsls	r2, r3
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d018      	beq.n	8001392 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d108      	bne.n	8001380 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	2b00      	cmp	r3, #0
 8001374:	d024      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	4798      	blx	r3
 800137e:	e01f      	b.n	80013c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001384:	2b00      	cmp	r3, #0
 8001386:	d01b      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	4798      	blx	r3
 8001390:	e016      	b.n	80013c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139c:	2b00      	cmp	r3, #0
 800139e:	d107      	bne.n	80013b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0208 	bic.w	r2, r2, #8
 80013ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c4:	2220      	movs	r2, #32
 80013c6:	409a      	lsls	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4013      	ands	r3, r2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 808f 	beq.w	80014f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0310 	and.w	r3, r3, #16
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 8087 	beq.w	80014f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e6:	2220      	movs	r2, #32
 80013e8:	409a      	lsls	r2, r3
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b05      	cmp	r3, #5
 80013f8:	d136      	bne.n	8001468 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 0216 	bic.w	r2, r2, #22
 8001408:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	695a      	ldr	r2, [r3, #20]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001418:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	2b00      	cmp	r3, #0
 8001420:	d103      	bne.n	800142a <HAL_DMA_IRQHandler+0x1da>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001426:	2b00      	cmp	r3, #0
 8001428:	d007      	beq.n	800143a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 0208 	bic.w	r2, r2, #8
 8001438:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800143e:	223f      	movs	r2, #63	; 0x3f
 8001440:	409a      	lsls	r2, r3
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2201      	movs	r2, #1
 800144a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800145a:	2b00      	cmp	r3, #0
 800145c:	d07e      	beq.n	800155c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	4798      	blx	r3
        }
        return;
 8001466:	e079      	b.n	800155c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d01d      	beq.n	80014b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10d      	bne.n	80014a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001488:	2b00      	cmp	r3, #0
 800148a:	d031      	beq.n	80014f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	4798      	blx	r3
 8001494:	e02c      	b.n	80014f0 <HAL_DMA_IRQHandler+0x2a0>
 8001496:	bf00      	nop
 8001498:	20000004 	.word	0x20000004
 800149c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d023      	beq.n	80014f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	4798      	blx	r3
 80014b0:	e01e      	b.n	80014f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d10f      	bne.n	80014e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0210 	bic.w	r2, r2, #16
 80014ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d032      	beq.n	800155e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b00      	cmp	r3, #0
 8001502:	d022      	beq.n	800154a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2205      	movs	r2, #5
 8001508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0201 	bic.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	3301      	adds	r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	429a      	cmp	r2, r3
 8001526:	d307      	bcc.n	8001538 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f2      	bne.n	800151c <HAL_DMA_IRQHandler+0x2cc>
 8001536:	e000      	b.n	800153a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001538:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	2b00      	cmp	r3, #0
 8001550:	d005      	beq.n	800155e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	4798      	blx	r3
 800155a:	e000      	b.n	800155e <HAL_DMA_IRQHandler+0x30e>
        return;
 800155c:	bf00      	nop
    }
  }
}
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8001564:	b480      	push	{r7}
 8001566:	b087      	sub	sp, #28
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	460b      	mov	r3, r1
 800156e:	607a      	str	r2, [r7, #4]
 8001570:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800157c:	2b01      	cmp	r3, #1
 800157e:	d101      	bne.n	8001584 <HAL_DMA_RegisterCallback+0x20>
 8001580:	2302      	movs	r3, #2
 8001582:	e03d      	b.n	8001600 <HAL_DMA_RegisterCallback+0x9c>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b01      	cmp	r3, #1
 8001596:	d12c      	bne.n	80015f2 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 8001598:	7afb      	ldrb	r3, [r7, #11]
 800159a:	2b05      	cmp	r3, #5
 800159c:	d826      	bhi.n	80015ec <HAL_DMA_RegisterCallback+0x88>
 800159e:	a201      	add	r2, pc, #4	; (adr r2, 80015a4 <HAL_DMA_RegisterCallback+0x40>)
 80015a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a4:	080015bd 	.word	0x080015bd
 80015a8:	080015c5 	.word	0x080015c5
 80015ac:	080015cd 	.word	0x080015cd
 80015b0:	080015d5 	.word	0x080015d5
 80015b4:	080015dd 	.word	0x080015dd
 80015b8:	080015e5 	.word	0x080015e5
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80015c2:	e018      	b.n	80015f6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80015ca:	e014      	b.n	80015f6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80015d2:	e010      	b.n	80015f6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80015da:	e00c      	b.n	80015f6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80015e2:	e008      	b.n	80015f6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80015ea:	e004      	b.n	80015f6 <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	75fb      	strb	r3, [r7, #23]
      break;
 80015f0:	e001      	b.n	80015f6 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80015fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001600:	4618      	mov	r0, r3
 8001602:	371c      	adds	r7, #28
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001628:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b40      	cmp	r3, #64	; 0x40
 8001638:	d108      	bne.n	800164c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800164a:	e007      	b.n	800165c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	60da      	str	r2, [r3, #12]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	3b10      	subs	r3, #16
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <DMA_CalcBaseAndBitshift+0x64>)
 800167a:	fba2 2303 	umull	r2, r3, r2, r3
 800167e:	091b      	lsrs	r3, r3, #4
 8001680:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001682:	4a13      	ldr	r2, [pc, #76]	; (80016d0 <DMA_CalcBaseAndBitshift+0x68>)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4413      	add	r3, r2
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2b03      	cmp	r3, #3
 8001694:	d909      	bls.n	80016aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800169e:	f023 0303 	bic.w	r3, r3, #3
 80016a2:	1d1a      	adds	r2, r3, #4
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	659a      	str	r2, [r3, #88]	; 0x58
 80016a8:	e007      	b.n	80016ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016b2:	f023 0303 	bic.w	r3, r3, #3
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	aaaaaaab 	.word	0xaaaaaaab
 80016d0:	080024a0 	.word	0x080024a0

080016d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016dc:	2300      	movs	r3, #0
 80016de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d11f      	bne.n	800172e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d856      	bhi.n	80017a2 <DMA_CheckFifoParam+0xce>
 80016f4:	a201      	add	r2, pc, #4	; (adr r2, 80016fc <DMA_CheckFifoParam+0x28>)
 80016f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fa:	bf00      	nop
 80016fc:	0800170d 	.word	0x0800170d
 8001700:	0800171f 	.word	0x0800171f
 8001704:	0800170d 	.word	0x0800170d
 8001708:	080017a3 	.word	0x080017a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d046      	beq.n	80017a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800171c:	e043      	b.n	80017a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001726:	d140      	bne.n	80017aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800172c:	e03d      	b.n	80017aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001736:	d121      	bne.n	800177c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2b03      	cmp	r3, #3
 800173c:	d837      	bhi.n	80017ae <DMA_CheckFifoParam+0xda>
 800173e:	a201      	add	r2, pc, #4	; (adr r2, 8001744 <DMA_CheckFifoParam+0x70>)
 8001740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001744:	08001755 	.word	0x08001755
 8001748:	0800175b 	.word	0x0800175b
 800174c:	08001755 	.word	0x08001755
 8001750:	0800176d 	.word	0x0800176d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
      break;
 8001758:	e030      	b.n	80017bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d025      	beq.n	80017b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800176a:	e022      	b.n	80017b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001774:	d11f      	bne.n	80017b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800177a:	e01c      	b.n	80017b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d903      	bls.n	800178a <DMA_CheckFifoParam+0xb6>
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	2b03      	cmp	r3, #3
 8001786:	d003      	beq.n	8001790 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001788:	e018      	b.n	80017bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	73fb      	strb	r3, [r7, #15]
      break;
 800178e:	e015      	b.n	80017bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00e      	beq.n	80017ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	73fb      	strb	r3, [r7, #15]
      break;
 80017a0:	e00b      	b.n	80017ba <DMA_CheckFifoParam+0xe6>
      break;
 80017a2:	bf00      	nop
 80017a4:	e00a      	b.n	80017bc <DMA_CheckFifoParam+0xe8>
      break;
 80017a6:	bf00      	nop
 80017a8:	e008      	b.n	80017bc <DMA_CheckFifoParam+0xe8>
      break;
 80017aa:	bf00      	nop
 80017ac:	e006      	b.n	80017bc <DMA_CheckFifoParam+0xe8>
      break;
 80017ae:	bf00      	nop
 80017b0:	e004      	b.n	80017bc <DMA_CheckFifoParam+0xe8>
      break;
 80017b2:	bf00      	nop
 80017b4:	e002      	b.n	80017bc <DMA_CheckFifoParam+0xe8>
      break;   
 80017b6:	bf00      	nop
 80017b8:	e000      	b.n	80017bc <DMA_CheckFifoParam+0xe8>
      break;
 80017ba:	bf00      	nop
    }
  } 
  
  return status; 
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop

080017cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
 80017e6:	e177      	b.n	8001ad8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017e8:	2201      	movs	r2, #1
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	429a      	cmp	r2, r3
 8001802:	f040 8166 	bne.w	8001ad2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	2b01      	cmp	r3, #1
 8001810:	d005      	beq.n	800181e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800181a:	2b02      	cmp	r3, #2
 800181c:	d130      	bne.n	8001880 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	2203      	movs	r2, #3
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4013      	ands	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001854:	2201      	movs	r2, #1
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	091b      	lsrs	r3, r3, #4
 800186a:	f003 0201 	and.w	r2, r3, #1
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	2b03      	cmp	r3, #3
 800188a:	d017      	beq.n	80018bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	2203      	movs	r2, #3
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d123      	bne.n	8001910 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	08da      	lsrs	r2, r3, #3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3208      	adds	r2, #8
 80018d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	220f      	movs	r2, #15
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	691a      	ldr	r2, [r3, #16]
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	08da      	lsrs	r2, r3, #3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3208      	adds	r2, #8
 800190a:	69b9      	ldr	r1, [r7, #24]
 800190c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	2203      	movs	r2, #3
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 0203 	and.w	r2, r3, #3
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 80c0 	beq.w	8001ad2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	4b66      	ldr	r3, [pc, #408]	; (8001af0 <HAL_GPIO_Init+0x324>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	4a65      	ldr	r2, [pc, #404]	; (8001af0 <HAL_GPIO_Init+0x324>)
 800195c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001960:	6453      	str	r3, [r2, #68]	; 0x44
 8001962:	4b63      	ldr	r3, [pc, #396]	; (8001af0 <HAL_GPIO_Init+0x324>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800196e:	4a61      	ldr	r2, [pc, #388]	; (8001af4 <HAL_GPIO_Init+0x328>)
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	089b      	lsrs	r3, r3, #2
 8001974:	3302      	adds	r3, #2
 8001976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	220f      	movs	r2, #15
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4013      	ands	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a58      	ldr	r2, [pc, #352]	; (8001af8 <HAL_GPIO_Init+0x32c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d037      	beq.n	8001a0a <HAL_GPIO_Init+0x23e>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a57      	ldr	r2, [pc, #348]	; (8001afc <HAL_GPIO_Init+0x330>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d031      	beq.n	8001a06 <HAL_GPIO_Init+0x23a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a56      	ldr	r2, [pc, #344]	; (8001b00 <HAL_GPIO_Init+0x334>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d02b      	beq.n	8001a02 <HAL_GPIO_Init+0x236>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a55      	ldr	r2, [pc, #340]	; (8001b04 <HAL_GPIO_Init+0x338>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d025      	beq.n	80019fe <HAL_GPIO_Init+0x232>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a54      	ldr	r2, [pc, #336]	; (8001b08 <HAL_GPIO_Init+0x33c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d01f      	beq.n	80019fa <HAL_GPIO_Init+0x22e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a53      	ldr	r2, [pc, #332]	; (8001b0c <HAL_GPIO_Init+0x340>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d019      	beq.n	80019f6 <HAL_GPIO_Init+0x22a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a52      	ldr	r2, [pc, #328]	; (8001b10 <HAL_GPIO_Init+0x344>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d013      	beq.n	80019f2 <HAL_GPIO_Init+0x226>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a51      	ldr	r2, [pc, #324]	; (8001b14 <HAL_GPIO_Init+0x348>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d00d      	beq.n	80019ee <HAL_GPIO_Init+0x222>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a50      	ldr	r2, [pc, #320]	; (8001b18 <HAL_GPIO_Init+0x34c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d007      	beq.n	80019ea <HAL_GPIO_Init+0x21e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a4f      	ldr	r2, [pc, #316]	; (8001b1c <HAL_GPIO_Init+0x350>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d101      	bne.n	80019e6 <HAL_GPIO_Init+0x21a>
 80019e2:	2309      	movs	r3, #9
 80019e4:	e012      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 80019e6:	230a      	movs	r3, #10
 80019e8:	e010      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 80019ea:	2308      	movs	r3, #8
 80019ec:	e00e      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 80019ee:	2307      	movs	r3, #7
 80019f0:	e00c      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 80019f2:	2306      	movs	r3, #6
 80019f4:	e00a      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 80019f6:	2305      	movs	r3, #5
 80019f8:	e008      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 80019fa:	2304      	movs	r3, #4
 80019fc:	e006      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 80019fe:	2303      	movs	r3, #3
 8001a00:	e004      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e002      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	69fa      	ldr	r2, [r7, #28]
 8001a0e:	f002 0203 	and.w	r2, r2, #3
 8001a12:	0092      	lsls	r2, r2, #2
 8001a14:	4093      	lsls	r3, r2
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a1c:	4935      	ldr	r1, [pc, #212]	; (8001af4 <HAL_GPIO_Init+0x328>)
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	089b      	lsrs	r3, r3, #2
 8001a22:	3302      	adds	r3, #2
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a2a:	4b3d      	ldr	r3, [pc, #244]	; (8001b20 <HAL_GPIO_Init+0x354>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a4e:	4a34      	ldr	r2, [pc, #208]	; (8001b20 <HAL_GPIO_Init+0x354>)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a54:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <HAL_GPIO_Init+0x354>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a78:	4a29      	ldr	r2, [pc, #164]	; (8001b20 <HAL_GPIO_Init+0x354>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a7e:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <HAL_GPIO_Init+0x354>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aa2:	4a1f      	ldr	r2, [pc, #124]	; (8001b20 <HAL_GPIO_Init+0x354>)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <HAL_GPIO_Init+0x354>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001acc:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <HAL_GPIO_Init+0x354>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	61fb      	str	r3, [r7, #28]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	2b0f      	cmp	r3, #15
 8001adc:	f67f ae84 	bls.w	80017e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	bf00      	nop
 8001ae4:	3724      	adds	r7, #36	; 0x24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40013800 	.word	0x40013800
 8001af8:	40020000 	.word	0x40020000
 8001afc:	40020400 	.word	0x40020400
 8001b00:	40020800 	.word	0x40020800
 8001b04:	40020c00 	.word	0x40020c00
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40021400 	.word	0x40021400
 8001b10:	40021800 	.word	0x40021800
 8001b14:	40021c00 	.word	0x40021c00
 8001b18:	40022000 	.word	0x40022000
 8001b1c:	40022400 	.word	0x40022400
 8001b20:	40013c00 	.word	0x40013c00

08001b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	807b      	strh	r3, [r7, #2]
 8001b30:	4613      	mov	r3, r2
 8001b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b34:	787b      	ldrb	r3, [r7, #1]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b3a:	887a      	ldrh	r2, [r7, #2]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b40:	e003      	b.n	8001b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b42:	887b      	ldrh	r3, [r7, #2]
 8001b44:	041a      	lsls	r2, r3, #16
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	619a      	str	r2, [r3, #24]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e267      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d075      	beq.n	8001c62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b76:	4b88      	ldr	r3, [pc, #544]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d00c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b82:	4b85      	ldr	r3, [pc, #532]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d112      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b8e:	4b82      	ldr	r3, [pc, #520]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b9a:	d10b      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9c:	4b7e      	ldr	r3, [pc, #504]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d05b      	beq.n	8001c60 <HAL_RCC_OscConfig+0x108>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d157      	bne.n	8001c60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e242      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bbc:	d106      	bne.n	8001bcc <HAL_RCC_OscConfig+0x74>
 8001bbe:	4b76      	ldr	r3, [pc, #472]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a75      	ldr	r2, [pc, #468]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	e01d      	b.n	8001c08 <HAL_RCC_OscConfig+0xb0>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x98>
 8001bd6:	4b70      	ldr	r3, [pc, #448]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a6f      	ldr	r2, [pc, #444]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	4b6d      	ldr	r3, [pc, #436]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a6c      	ldr	r2, [pc, #432]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e00b      	b.n	8001c08 <HAL_RCC_OscConfig+0xb0>
 8001bf0:	4b69      	ldr	r3, [pc, #420]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a68      	ldr	r2, [pc, #416]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	4b66      	ldr	r3, [pc, #408]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a65      	ldr	r2, [pc, #404]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d013      	beq.n	8001c38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7ff f8d6 	bl	8000dc0 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c18:	f7ff f8d2 	bl	8000dc0 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b64      	cmp	r3, #100	; 0x64
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e207      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2a:	4b5b      	ldr	r3, [pc, #364]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0xc0>
 8001c36:	e014      	b.n	8001c62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7ff f8c2 	bl	8000dc0 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c40:	f7ff f8be 	bl	8000dc0 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b64      	cmp	r3, #100	; 0x64
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e1f3      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c52:	4b51      	ldr	r3, [pc, #324]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0xe8>
 8001c5e:	e000      	b.n	8001c62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d063      	beq.n	8001d36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c6e:	4b4a      	ldr	r3, [pc, #296]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00b      	beq.n	8001c92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c7a:	4b47      	ldr	r3, [pc, #284]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d11c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c86:	4b44      	ldr	r3, [pc, #272]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d116      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c92:	4b41      	ldr	r3, [pc, #260]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d005      	beq.n	8001caa <HAL_RCC_OscConfig+0x152>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d001      	beq.n	8001caa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e1c7      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001caa:	4b3b      	ldr	r3, [pc, #236]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4937      	ldr	r1, [pc, #220]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cbe:	e03a      	b.n	8001d36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d020      	beq.n	8001d0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc8:	4b34      	ldr	r3, [pc, #208]	; (8001d9c <HAL_RCC_OscConfig+0x244>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cce:	f7ff f877 	bl	8000dc0 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd6:	f7ff f873 	bl	8000dc0 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e1a8      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce8:	4b2b      	ldr	r3, [pc, #172]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf4:	4b28      	ldr	r3, [pc, #160]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	4925      	ldr	r1, [pc, #148]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]
 8001d08:	e015      	b.n	8001d36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d0a:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <HAL_RCC_OscConfig+0x244>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7ff f856 	bl	8000dc0 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d18:	f7ff f852 	bl	8000dc0 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e187      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2a:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d036      	beq.n	8001db0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d016      	beq.n	8001d78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d4a:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <HAL_RCC_OscConfig+0x248>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d50:	f7ff f836 	bl	8000dc0 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d58:	f7ff f832 	bl	8000dc0 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e167      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0x200>
 8001d76:	e01b      	b.n	8001db0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d78:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_RCC_OscConfig+0x248>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7e:	f7ff f81f 	bl	8000dc0 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d84:	e00e      	b.n	8001da4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d86:	f7ff f81b 	bl	8000dc0 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d907      	bls.n	8001da4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e150      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	42470000 	.word	0x42470000
 8001da0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da4:	4b88      	ldr	r3, [pc, #544]	; (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1ea      	bne.n	8001d86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 8097 	beq.w	8001eec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc2:	4b81      	ldr	r3, [pc, #516]	; (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10f      	bne.n	8001dee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	4b7d      	ldr	r3, [pc, #500]	; (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	4a7c      	ldr	r2, [pc, #496]	; (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dde:	4b7a      	ldr	r3, [pc, #488]	; (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dea:	2301      	movs	r3, #1
 8001dec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dee:	4b77      	ldr	r3, [pc, #476]	; (8001fcc <HAL_RCC_OscConfig+0x474>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d118      	bne.n	8001e2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dfa:	4b74      	ldr	r3, [pc, #464]	; (8001fcc <HAL_RCC_OscConfig+0x474>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a73      	ldr	r2, [pc, #460]	; (8001fcc <HAL_RCC_OscConfig+0x474>)
 8001e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e06:	f7fe ffdb 	bl	8000dc0 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e0e:	f7fe ffd7 	bl	8000dc0 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e10c      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e20:	4b6a      	ldr	r3, [pc, #424]	; (8001fcc <HAL_RCC_OscConfig+0x474>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d106      	bne.n	8001e42 <HAL_RCC_OscConfig+0x2ea>
 8001e34:	4b64      	ldr	r3, [pc, #400]	; (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e38:	4a63      	ldr	r2, [pc, #396]	; (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e40:	e01c      	b.n	8001e7c <HAL_RCC_OscConfig+0x324>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b05      	cmp	r3, #5
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x30c>
 8001e4a:	4b5f      	ldr	r3, [pc, #380]	; (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4e:	4a5e      	ldr	r2, [pc, #376]	; (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	6713      	str	r3, [r2, #112]	; 0x70
 8001e56:	4b5c      	ldr	r3, [pc, #368]	; (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5a:	4a5b      	ldr	r2, [pc, #364]	; (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6713      	str	r3, [r2, #112]	; 0x70
 8001e62:	e00b      	b.n	8001e7c <HAL_RCC_OscConfig+0x324>
 8001e64:	4b58      	ldr	r3, [pc, #352]	; (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e68:	4a57      	ldr	r2, [pc, #348]	; (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e6a:	f023 0301 	bic.w	r3, r3, #1
 8001e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e70:	4b55      	ldr	r3, [pc, #340]	; (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e74:	4a54      	ldr	r2, [pc, #336]	; (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e76:	f023 0304 	bic.w	r3, r3, #4
 8001e7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d015      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e84:	f7fe ff9c 	bl	8000dc0 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e8c:	f7fe ff98 	bl	8000dc0 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e0cb      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea2:	4b49      	ldr	r3, [pc, #292]	; (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0ee      	beq.n	8001e8c <HAL_RCC_OscConfig+0x334>
 8001eae:	e014      	b.n	8001eda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb0:	f7fe ff86 	bl	8000dc0 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb8:	f7fe ff82 	bl	8000dc0 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e0b5      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ece:	4b3e      	ldr	r3, [pc, #248]	; (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1ee      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eda:	7dfb      	ldrb	r3, [r7, #23]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d105      	bne.n	8001eec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee0:	4b39      	ldr	r3, [pc, #228]	; (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	4a38      	ldr	r2, [pc, #224]	; (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 80a1 	beq.w	8002038 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ef6:	4b34      	ldr	r3, [pc, #208]	; (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d05c      	beq.n	8001fbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d141      	bne.n	8001f8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0a:	4b31      	ldr	r3, [pc, #196]	; (8001fd0 <HAL_RCC_OscConfig+0x478>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7fe ff56 	bl	8000dc0 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f18:	f7fe ff52 	bl	8000dc0 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e087      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2a:	4b27      	ldr	r3, [pc, #156]	; (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69da      	ldr	r2, [r3, #28]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	019b      	lsls	r3, r3, #6
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	041b      	lsls	r3, r3, #16
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f58:	061b      	lsls	r3, r3, #24
 8001f5a:	491b      	ldr	r1, [pc, #108]	; (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f60:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_RCC_OscConfig+0x478>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7fe ff2b 	bl	8000dc0 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7fe ff27 	bl	8000dc0 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e05c      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x416>
 8001f8c:	e054      	b.n	8002038 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <HAL_RCC_OscConfig+0x478>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7fe ff14 	bl	8000dc0 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7fe ff10 	bl	8000dc0 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e045      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x444>
 8001fba:	e03d      	b.n	8002038 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d107      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e038      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40007000 	.word	0x40007000
 8001fd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <HAL_RCC_OscConfig+0x4ec>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d028      	beq.n	8002034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d121      	bne.n	8002034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d11a      	bne.n	8002034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002004:	4013      	ands	r3, r2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800200a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800200c:	4293      	cmp	r3, r2
 800200e:	d111      	bne.n	8002034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201a:	085b      	lsrs	r3, r3, #1
 800201c:	3b01      	subs	r3, #1
 800201e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002020:	429a      	cmp	r2, r3
 8002022:	d107      	bne.n	8002034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d001      	beq.n	8002038 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800

08002048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0cc      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800205c:	4b68      	ldr	r3, [pc, #416]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d90c      	bls.n	8002084 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b65      	ldr	r3, [pc, #404]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002072:	4b63      	ldr	r3, [pc, #396]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d001      	beq.n	8002084 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0b8      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d020      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800209c:	4b59      	ldr	r3, [pc, #356]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4a58      	ldr	r2, [pc, #352]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b4:	4b53      	ldr	r3, [pc, #332]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	4a52      	ldr	r2, [pc, #328]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c0:	4b50      	ldr	r3, [pc, #320]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	494d      	ldr	r1, [pc, #308]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d044      	beq.n	8002168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	4b47      	ldr	r3, [pc, #284]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d119      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e07f      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d003      	beq.n	8002106 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002102:	2b03      	cmp	r3, #3
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002106:	4b3f      	ldr	r3, [pc, #252]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d109      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e06f      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002116:	4b3b      	ldr	r3, [pc, #236]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e067      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002126:	4b37      	ldr	r3, [pc, #220]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f023 0203 	bic.w	r2, r3, #3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	4934      	ldr	r1, [pc, #208]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002134:	4313      	orrs	r3, r2
 8002136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002138:	f7fe fe42 	bl	8000dc0 <HAL_GetTick>
 800213c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213e:	e00a      	b.n	8002156 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002140:	f7fe fe3e 	bl	8000dc0 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f241 3288 	movw	r2, #5000	; 0x1388
 800214e:	4293      	cmp	r3, r2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e04f      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	4b2b      	ldr	r3, [pc, #172]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 020c 	and.w	r2, r3, #12
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	429a      	cmp	r2, r3
 8002166:	d1eb      	bne.n	8002140 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002168:	4b25      	ldr	r3, [pc, #148]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d20c      	bcs.n	8002190 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002176:	4b22      	ldr	r3, [pc, #136]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b20      	ldr	r3, [pc, #128]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e032      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4916      	ldr	r1, [pc, #88]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d009      	beq.n	80021ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ba:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	490e      	ldr	r1, [pc, #56]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ce:	f000 f821 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 80021d2:	4602      	mov	r2, r0
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	490a      	ldr	r1, [pc, #40]	; (8002208 <HAL_RCC_ClockConfig+0x1c0>)
 80021e0:	5ccb      	ldrb	r3, [r1, r3]
 80021e2:	fa22 f303 	lsr.w	r3, r2, r3
 80021e6:	4a09      	ldr	r2, [pc, #36]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021ea:	4b09      	ldr	r3, [pc, #36]	; (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe fda2 	bl	8000d38 <HAL_InitTick>

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40023c00 	.word	0x40023c00
 8002204:	40023800 	.word	0x40023800
 8002208:	08002490 	.word	0x08002490
 800220c:	20000004 	.word	0x20000004
 8002210:	20000008 	.word	0x20000008

08002214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002218:	b094      	sub	sp, #80	; 0x50
 800221a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	647b      	str	r3, [r7, #68]	; 0x44
 8002220:	2300      	movs	r3, #0
 8002222:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002224:	2300      	movs	r3, #0
 8002226:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800222c:	4b79      	ldr	r3, [pc, #484]	; (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 030c 	and.w	r3, r3, #12
 8002234:	2b08      	cmp	r3, #8
 8002236:	d00d      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x40>
 8002238:	2b08      	cmp	r3, #8
 800223a:	f200 80e1 	bhi.w	8002400 <HAL_RCC_GetSysClockFreq+0x1ec>
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x34>
 8002242:	2b04      	cmp	r3, #4
 8002244:	d003      	beq.n	800224e <HAL_RCC_GetSysClockFreq+0x3a>
 8002246:	e0db      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002248:	4b73      	ldr	r3, [pc, #460]	; (8002418 <HAL_RCC_GetSysClockFreq+0x204>)
 800224a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800224c:	e0db      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800224e:	4b73      	ldr	r3, [pc, #460]	; (800241c <HAL_RCC_GetSysClockFreq+0x208>)
 8002250:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002252:	e0d8      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002254:	4b6f      	ldr	r3, [pc, #444]	; (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800225c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800225e:	4b6d      	ldr	r3, [pc, #436]	; (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d063      	beq.n	8002332 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800226a:	4b6a      	ldr	r3, [pc, #424]	; (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	099b      	lsrs	r3, r3, #6
 8002270:	2200      	movs	r2, #0
 8002272:	63bb      	str	r3, [r7, #56]	; 0x38
 8002274:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800227c:	633b      	str	r3, [r7, #48]	; 0x30
 800227e:	2300      	movs	r3, #0
 8002280:	637b      	str	r3, [r7, #52]	; 0x34
 8002282:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002286:	4622      	mov	r2, r4
 8002288:	462b      	mov	r3, r5
 800228a:	f04f 0000 	mov.w	r0, #0
 800228e:	f04f 0100 	mov.w	r1, #0
 8002292:	0159      	lsls	r1, r3, #5
 8002294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002298:	0150      	lsls	r0, r2, #5
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4621      	mov	r1, r4
 80022a0:	1a51      	subs	r1, r2, r1
 80022a2:	6139      	str	r1, [r7, #16]
 80022a4:	4629      	mov	r1, r5
 80022a6:	eb63 0301 	sbc.w	r3, r3, r1
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022b8:	4659      	mov	r1, fp
 80022ba:	018b      	lsls	r3, r1, #6
 80022bc:	4651      	mov	r1, sl
 80022be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022c2:	4651      	mov	r1, sl
 80022c4:	018a      	lsls	r2, r1, #6
 80022c6:	4651      	mov	r1, sl
 80022c8:	ebb2 0801 	subs.w	r8, r2, r1
 80022cc:	4659      	mov	r1, fp
 80022ce:	eb63 0901 	sbc.w	r9, r3, r1
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022e6:	4690      	mov	r8, r2
 80022e8:	4699      	mov	r9, r3
 80022ea:	4623      	mov	r3, r4
 80022ec:	eb18 0303 	adds.w	r3, r8, r3
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	462b      	mov	r3, r5
 80022f4:	eb49 0303 	adc.w	r3, r9, r3
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002306:	4629      	mov	r1, r5
 8002308:	024b      	lsls	r3, r1, #9
 800230a:	4621      	mov	r1, r4
 800230c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002310:	4621      	mov	r1, r4
 8002312:	024a      	lsls	r2, r1, #9
 8002314:	4610      	mov	r0, r2
 8002316:	4619      	mov	r1, r3
 8002318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800231a:	2200      	movs	r2, #0
 800231c:	62bb      	str	r3, [r7, #40]	; 0x28
 800231e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002320:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002324:	f7fd ff62 	bl	80001ec <__aeabi_uldivmod>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4613      	mov	r3, r2
 800232e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002330:	e058      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002332:	4b38      	ldr	r3, [pc, #224]	; (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	099b      	lsrs	r3, r3, #6
 8002338:	2200      	movs	r2, #0
 800233a:	4618      	mov	r0, r3
 800233c:	4611      	mov	r1, r2
 800233e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002342:	623b      	str	r3, [r7, #32]
 8002344:	2300      	movs	r3, #0
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
 8002348:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800234c:	4642      	mov	r2, r8
 800234e:	464b      	mov	r3, r9
 8002350:	f04f 0000 	mov.w	r0, #0
 8002354:	f04f 0100 	mov.w	r1, #0
 8002358:	0159      	lsls	r1, r3, #5
 800235a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800235e:	0150      	lsls	r0, r2, #5
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4641      	mov	r1, r8
 8002366:	ebb2 0a01 	subs.w	sl, r2, r1
 800236a:	4649      	mov	r1, r9
 800236c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800237c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002380:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002384:	ebb2 040a 	subs.w	r4, r2, sl
 8002388:	eb63 050b 	sbc.w	r5, r3, fp
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	00eb      	lsls	r3, r5, #3
 8002396:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800239a:	00e2      	lsls	r2, r4, #3
 800239c:	4614      	mov	r4, r2
 800239e:	461d      	mov	r5, r3
 80023a0:	4643      	mov	r3, r8
 80023a2:	18e3      	adds	r3, r4, r3
 80023a4:	603b      	str	r3, [r7, #0]
 80023a6:	464b      	mov	r3, r9
 80023a8:	eb45 0303 	adc.w	r3, r5, r3
 80023ac:	607b      	str	r3, [r7, #4]
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023ba:	4629      	mov	r1, r5
 80023bc:	028b      	lsls	r3, r1, #10
 80023be:	4621      	mov	r1, r4
 80023c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023c4:	4621      	mov	r1, r4
 80023c6:	028a      	lsls	r2, r1, #10
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ce:	2200      	movs	r2, #0
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	61fa      	str	r2, [r7, #28]
 80023d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023d8:	f7fd ff08 	bl	80001ec <__aeabi_uldivmod>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4613      	mov	r3, r2
 80023e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	0c1b      	lsrs	r3, r3, #16
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	3301      	adds	r3, #1
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80023f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023fe:	e002      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <HAL_RCC_GetSysClockFreq+0x204>)
 8002402:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002408:	4618      	mov	r0, r3
 800240a:	3750      	adds	r7, #80	; 0x50
 800240c:	46bd      	mov	sp, r7
 800240e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800
 8002418:	00f42400 	.word	0x00f42400
 800241c:	007a1200 	.word	0x007a1200

08002420 <__libc_init_array>:
 8002420:	b570      	push	{r4, r5, r6, lr}
 8002422:	4d0d      	ldr	r5, [pc, #52]	; (8002458 <__libc_init_array+0x38>)
 8002424:	4c0d      	ldr	r4, [pc, #52]	; (800245c <__libc_init_array+0x3c>)
 8002426:	1b64      	subs	r4, r4, r5
 8002428:	10a4      	asrs	r4, r4, #2
 800242a:	2600      	movs	r6, #0
 800242c:	42a6      	cmp	r6, r4
 800242e:	d109      	bne.n	8002444 <__libc_init_array+0x24>
 8002430:	4d0b      	ldr	r5, [pc, #44]	; (8002460 <__libc_init_array+0x40>)
 8002432:	4c0c      	ldr	r4, [pc, #48]	; (8002464 <__libc_init_array+0x44>)
 8002434:	f000 f820 	bl	8002478 <_init>
 8002438:	1b64      	subs	r4, r4, r5
 800243a:	10a4      	asrs	r4, r4, #2
 800243c:	2600      	movs	r6, #0
 800243e:	42a6      	cmp	r6, r4
 8002440:	d105      	bne.n	800244e <__libc_init_array+0x2e>
 8002442:	bd70      	pop	{r4, r5, r6, pc}
 8002444:	f855 3b04 	ldr.w	r3, [r5], #4
 8002448:	4798      	blx	r3
 800244a:	3601      	adds	r6, #1
 800244c:	e7ee      	b.n	800242c <__libc_init_array+0xc>
 800244e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002452:	4798      	blx	r3
 8002454:	3601      	adds	r6, #1
 8002456:	e7f2      	b.n	800243e <__libc_init_array+0x1e>
 8002458:	080024b0 	.word	0x080024b0
 800245c:	080024b0 	.word	0x080024b0
 8002460:	080024b0 	.word	0x080024b0
 8002464:	080024b4 	.word	0x080024b4

08002468 <memset>:
 8002468:	4402      	add	r2, r0
 800246a:	4603      	mov	r3, r0
 800246c:	4293      	cmp	r3, r2
 800246e:	d100      	bne.n	8002472 <memset+0xa>
 8002470:	4770      	bx	lr
 8002472:	f803 1b01 	strb.w	r1, [r3], #1
 8002476:	e7f9      	b.n	800246c <memset+0x4>

08002478 <_init>:
 8002478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800247a:	bf00      	nop
 800247c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800247e:	bc08      	pop	{r3}
 8002480:	469e      	mov	lr, r3
 8002482:	4770      	bx	lr

08002484 <_fini>:
 8002484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002486:	bf00      	nop
 8002488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800248a:	bc08      	pop	{r3}
 800248c:	469e      	mov	lr, r3
 800248e:	4770      	bx	lr
